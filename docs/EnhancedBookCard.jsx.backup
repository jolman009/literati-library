// src/components/EnhancedBookCard.jsx - Updated with Separated Timer & Status
import React, { useState, useEffect, useRef } from 'react';
import { useReadingSession } from '../contexts/ReadingSessionContext';
import { useGamification } from '../contexts/GamificationContext';
import { 
  Timer, 
  BookOpen, 
  MoreVertical,
  TrendingUp,
  Target,
  Bookmark,
  Zap
} from 'lucide-react';

// Import the new timer widget
import TimerPopupWidget from './TimerPopupWidget';

export const EnhancedBookCard = ({ 
  book, 
  viewMode = 'grid', 
  onRead, 
  onEdit,
  onDelete,
  className = '',
  isPremium = true
}) => {
  const [showMenu, setShowMenu] = useState(false);
  const [showTimerWidget, setShowTimerWidget] = useState(false);
  const [bookStatus, setBookStatus] = useState(book.status || 'want-to-read');
  const menuRef = useRef(null);
  
  const { activeSession } = useReadingSession();
  const { trackAction } = useGamification();

  // Check if THIS specific book has an active reading session (timer running)
  const hasActiveSession = activeSession?.book?.id === book.id;

  const handleCardClick = (e) => {
    if (e.target.closest('.menu-button') || 
        e.target.closest('.book-menu') || 
        e.target.closest('.reading-actions')) {
      return;
    }
    
    console.log('ðŸ“– Card clicked, opening book:', book.title);
    onRead?.(book);
  };

  const handleMenuClick = (e) => {
    e.stopPropagation();
    setShowMenu(!showMenu);
  };

  const handleStartReadingSession = () => {
    setShowTimerWidget(true);
    setShowMenu(false);
  };

  const handleMarkAsReading = () => {
    setBookStatus('currently-reading');
    setShowMenu(false);
    trackAction('mark_as_reading', { bookId: book.id });
  };

  const handleMarkAsFinished = () => {
    setBookStatus('finished');
    setShowMenu(false);
    trackAction('mark_as_finished', { bookId: book.id });
  };

  const handleMarkAsWantToRead = () => {
    setBookStatus('want-to-read');
    setShowMenu(false);
    trackAction('mark_as_want_to_read', { bookId: book.id });
  };

  // Close menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setShowMenu(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const getStatusColor = (status) => {
    switch (status) {
      case 'currently-reading': return '#22c55e';
      case 'finished': return '#3b82f6';
      case 'want-to-read': return '#f59e0b';
      default: return '#6b7280';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'currently-reading': return 'Reading';
      case 'finished': return 'Finished';
      case 'want-to-read': return 'Want to Read';
      default: return 'Unknown';
    }
  };

  return (
    <>
      <div className={`enhanced-book-card ${viewMode} ${className}`}>
        <div 
          className="book-card-content"
          onClick={handleCardClick}
          style={{
            borderRadius: '16px',
            background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
            border: `2px solid ${hasActiveSession ? '#22c55e' : '#e2e8f0'}`,
            padding: '20px',
            cursor: 'pointer',
            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
            position: 'relative',
            overflow: 'hidden',
            boxShadow: hasActiveSession 
              ? '0 8px 25px rgba(34, 197, 94, 0.2)' 
              : '0 4px 12px rgba(0, 0, 0, 0.1)'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-4px)';
            e.currentTarget.style.boxShadow = hasActiveSession 
              ? '0 12px 35px rgba(34, 197, 94, 0.3)' 
              : '0 8px 25px rgba(0, 0, 0, 0.15)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = hasActiveSession 
              ? '0 8px 25px rgba(34, 197, 94, 0.2)' 
              : '0 4px 12px rgba(0, 0, 0, 0.1)';
          }}
        >
          {/* Book Cover */}
          <div style={{ position: 'relative', marginBottom: '16px' }}>
            <div style={{
              width: '100%',
              height: '200px',
              backgroundColor: '#f1f5f9',
              borderRadius: '12px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              border: '2px dashed #cbd5e1',
              position: 'relative',
              backgroundImage: book.coverUrl ? `url(${book.coverUrl})` : 'none',
              backgroundSize: 'cover',
              backgroundPosition: 'center'
            }}>
              {!book.coverUrl && <BookOpen className="w-12 h-12 text-gray-400" />}
              
              {/* Book Status Badge - Always visible, separate from timer */}
              <div style={{
                position: 'absolute',
                top: '8px',
                left: '8px',
                backgroundColor: getStatusColor(bookStatus),
                color: 'white',
                padding: '4px 8px',
                borderRadius: '12px',
                fontSize: '10px',
                fontWeight: '600',
                textTransform: 'uppercase'
              }}>
                {getStatusText(bookStatus)}
              </div>

              {/* Active Session Indicator - Only when timer is running */}
              {hasActiveSession && (
                <div style={{
                  position: 'absolute',
                  top: '8px',
                  right: '8px',
                  backgroundColor: '#22c55e',
                  color: 'white',
                  padding: '6px 10px',
                  borderRadius: '15px',
                  fontSize: '11px',
                  fontWeight: 'bold',
                  animation: 'pulse 2s infinite',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '4px'
                }}>
                  <Timer className="w-3 h-3" />
                  READING NOW
                </div>
              )}
            </div>

            {/* Menu Button */}
            <button
              ref={menuRef}
              className="menu-button"
              onClick={handleMenuClick}
              style={{
                position: 'absolute',
                top: '8px',
                right: hasActiveSession ? '120px' : '8px',
                width: '32px',
                height: '32px',
                borderRadius: '50%',
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                border: 'none',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
                transition: 'all 0.2s ease'
              }}
            >
              <MoreVertical className="w-4 h-4 text-gray-600" />
            </button>

            {/* Menu Dropdown */}
            {showMenu && (
              <div className="book-menu" style={{
                position: 'absolute',
                top: '45px',
                right: '8px',
                backgroundColor: 'white',
                borderRadius: '12px',
                boxShadow: '0 8px 25px rgba(0, 0, 0, 0.15)',
                border: '1px solid #e2e8f0',
                padding: '8px 0',
                minWidth: '200px',
                zIndex: 10
              }}>
                <button
                  onClick={() => { onRead?.(book); setShowMenu(false); }}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    textAlign: 'left',
                    border: 'none',
                    background: 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontSize: '14px',
                    color: '#374151'
                  }}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#f8fafc'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                >
                  <BookOpen className="w-4 h-4" />
                  Open Book
                </button>
                
                <div style={{ height: '1px', backgroundColor: '#e2e8f0', margin: '4px 0' }} />
                
                {/* Status Change Options */}
                <button
                  onClick={handleMarkAsWantToRead}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    textAlign: 'left',
                    border: 'none',
                    background: bookStatus === 'want-to-read' ? '#f0f9ff' : 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontSize: '14px',
                    color: '#374151'
                  }}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#f8fafc'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = bookStatus === 'want-to-read' ? '#f0f9ff' : 'transparent'}
                >
                  <Target className="w-4 h-4" />
                  Want to Read
                </button>
                
                <button
                  onClick={handleMarkAsReading}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    textAlign: 'left',
                    border: 'none',
                    background: bookStatus === 'currently-reading' ? '#f0fdf4' : 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontSize: '14px',
                    color: '#374151'
                  }}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#f8fafc'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = bookStatus === 'currently-reading' ? '#f0fdf4' : 'transparent'}
                >
                  <Bookmark className="w-4 h-4" />
                  Currently Reading
                </button>
                
                <button
                  onClick={handleMarkAsFinished}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    textAlign: 'left',
                    border: 'none',
                    background: bookStatus === 'finished' ? '#eff6ff' : 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontSize: '14px',
                    color: '#374151'
                  }}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#f8fafc'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = bookStatus === 'finished' ? '#eff6ff' : 'transparent'}
                >
                  <Target className="w-4 h-4" />
                  Finished
                </button>
                
                <div style={{ height: '1px', backgroundColor: '#e2e8f0', margin: '4px 0' }} />
                
                <button
                  onClick={() => { onEdit?.(book); setShowMenu(false); }}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    textAlign: 'left',
                    border: 'none',
                    background: 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontSize: '14px',
                    color: '#374151'
                  }}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#f8fafc'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                >
                  <TrendingUp className="w-4 h-4" />
                  Edit Details
                </button>
                
                <button
                  onClick={() => { onDelete?.(book); setShowMenu(false); }}
                  style={{
                    width: '100%',
                    padding: '12px 16px',
                    textAlign: 'left',
                    border: 'none',
                    background: 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontSize: '14px',
                    color: '#dc2626'
                  }}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#fef2f2'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                >
                  <TrendingUp className="w-4 h-4" />
                  Delete Book
                </button>
              </div>
            )}
          </div>

          {/* Book Details */}
          <div style={{ marginBottom: '16px' }}>
            <h3 style={{ 
              margin: '0 0 8px 0', 
              fontSize: '18px', 
              fontWeight: '600',
              color: '#1f2937',
              lineHeight: '1.3'
            }}>
              {book.title}
            </h3>
            <p style={{ 
              margin: '0 0 4px 0', 
              fontSize: '14px', 
              color: '#6b7280',
              fontWeight: '500'
            }}>
              {book.author}
            </p>
            {book.currentPage && book.totalPages && (
              <p style={{ 
                margin: '0', 
                fontSize: '12px', 
                color: '#9ca3af'
              }}>
                Page {book.currentPage} of {book.totalPages}
              </p>
            )}
          </div>

          {/* Reading Actions - Separated from Status */}
          <div className="reading-actions" style={{ 
            display: 'flex', 
            gap: '8px',
            marginTop: 'auto'
          }}>
            {/* Start Reading Session Button - Separate from status */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleStartReadingSession();
              }}
              style={{
                flex: 1,
                padding: '12px 16px',
                backgroundColor: hasActiveSession ? '#22c55e' : '#3b82f6',
                color: 'white',
                border: 'none',
                borderRadius: '12px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '6px',
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={(e) => {
                e.target.style.backgroundColor = hasActiveSession ? '#16a34a' : '#2563eb';
              }}
              onMouseLeave={(e) => {
                e.target.style.backgroundColor = hasActiveSession ? '#22c55e' : '#3b82f6';
              }}
            >
              <Timer className="w-4 h-4" />
              {hasActiveSession ? 'Session Active' : 'Start Session'}
            </button>
            
            {/* Quick Progress Button */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                trackAction('quick_progress');
              }}
              style={{
                padding: '12px',
                backgroundColor: '#f3f4f6',
                color: '#374151',
                border: 'none',
                borderRadius: '12px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#e5e7eb'}
              onMouseLeave={(e) => e.target.style.backgroundColor = '#f3f4f6'}
            >
              <TrendingUp className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Timer Pop-up Widget - Only shows when explicitly opened */}
      <TimerPopupWidget
        book={book}
        isOpen={showTimerWidget}
        onClose={() => setShowTimerWidget(false)}
      />

      <style jsx>{`
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.8; }
        }
      `}</style>
    </>
  );
};

export default EnhancedBookCard;