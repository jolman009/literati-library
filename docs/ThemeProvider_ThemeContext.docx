// src/components/Material3/providers/ThemeProvider.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { createCSSCustomProperties } from '../../../design-tokens/material3';

const Material3ThemeContext = createContext();

export const Material3ThemeProvider = ({ children, defaultTheme = 'auto' }) => {
  const [theme, setTheme] = useState(defaultTheme);
  const [isDark, setIsDark] = useState(false);

  useEffect(() => {
    const applyTheme = (themeName) => {
      console.log('ðŸŽ¨ ThemeProvider: Applying theme:', themeName);
      
      try {
        const root = document.documentElement;
        const properties = createCSSCustomProperties(themeName === 'dark');
        
        console.log('ðŸŽ¨ ThemeProvider: Generated properties count:', Object.keys(properties).length);
        console.log('ðŸŽ¨ ThemeProvider: Sample properties:', {
          primary: properties['--md-sys-color-primary'],
          surface: properties['--md-sys-color-surface'],
          onSurface: properties['--md-sys-color-on-surface'],
          background: properties['--md-sys-color-background']
        });
        
        // Apply CSS custom properties with error handling
        let successCount = 0;
        let errorCount = 0;
        
        Object.entries(properties).forEach(([key, value]) => {
          try {
            root.style.setProperty(key, value);
            successCount++;
          } catch (error) {
            console.error(`ðŸŽ¨ ThemeProvider: Failed to set ${key}:`, error);
            errorCount++;
          }
        });
        
        console.log(`ðŸŽ¨ ThemeProvider: Applied ${successCount} properties, ${errorCount} errors`);
        
        root.setAttribute('data-theme', themeName);
        setIsDark(themeName === 'dark');
        
        console.log('ðŸŽ¨ ThemeProvider: Theme applied successfully. isDark:', themeName === 'dark');
        console.log('ðŸŽ¨ ThemeProvider: Root data-theme attribute:', root.getAttribute('data-theme'));
        
        // Verify a few key properties were actually set
        const verifyProps = ['--md-sys-color-primary', '--md-sys-color-surface', '--md-sys-color-on-surface'];
        verifyProps.forEach(prop => {
          const computedValue = getComputedStyle(root).getPropertyValue(prop);
          console.log(`ðŸŽ¨ ThemeProvider: Verified ${prop}:`, computedValue.trim() || 'NOT SET');
        });
        
      } catch (error) {
        console.error('ðŸŽ¨ ThemeProvider: Error applying theme:', error);
      }
    };

    if (theme === 'auto') {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      applyTheme(mediaQuery.matches ? 'dark' : 'light');
      
      const handler = (e) => applyTheme(e.matches ? 'dark' : 'light');
      mediaQuery.addEventListener('change', handler);
      return () => mediaQuery.removeEventListener('change', handler);
    } else {
      applyTheme(theme);
    }
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prev => {
      // If currently auto, determine current state and toggle
      if (prev === 'auto') {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        return mediaQuery.matches ? 'light' : 'dark';
      }
      // Normal toggle between light and dark
      return prev === 'dark' ? 'light' : 'dark';
    });
  };

  // Get the actual theme being used (resolves 'auto' to 'light' or 'dark')
  const getActualTheme = () => {
    if (theme === 'auto') {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      return mediaQuery.matches ? 'dark' : 'light';
    }
    return theme;
  };

  const actualTheme = getActualTheme();

  return (
    <Material3ThemeContext.Provider value={{
      theme,
      setTheme,
      isDark,
      toggleTheme,
      actualTheme
    }}>
      {children}
    </Material3ThemeContext.Provider>
  );
};

export const useMaterial3Theme = () => {
  const context = useContext(Material3ThemeContext);
  if (!context) {
    throw new Error('useMaterial3Theme must be used within Material3ThemeProvider');
  }
  return context;
};

// Hook to get theme colors
export const useThemeColors = () => {
  const { actualTheme } = useMaterial3Theme();
  
  // Get computed CSS custom properties
  const getColor = (colorName) => {
    const root = document.documentElement;
    return getComputedStyle(root).getPropertyValue(`--md-sys-color-${colorName}`).trim();
  };

  return {
    primary: getColor('primary'),
    onPrimary: getColor('on-primary'),
    surface: getColor('surface'),
    onSurface: getColor('on-surface'),
    background: getColor('background'),
    onBackground: getColor('on-background'),
    surfaceVariant: getColor('surface-variant'),
    onSurfaceVariant: getColor('on-surface-variant'),
    outline: getColor('outline'),
    outlineVariant: getColor('outline-variant'),
    isDark: actualTheme === 'dark'
  };
};


// src/contexts/Material3ThemeContext.jsx
import React, { createContext, useContext, useState, useEffect, useMemo } from 'react';

const Material3ThemeContext = createContext();

export const useMaterial3Theme = () => {
  const context = useContext(Material3ThemeContext);
  if (!context) {
    throw new Error('useMaterial3Theme must be used within a Material3ThemeProvider');
  }
  return context;
};

export const Material3ThemeProvider = ({ children }) => {
  // Initialize theme from localStorage or system preference
  const [theme, setTheme] = useState(() => {
    const stored = localStorage.getItem('literati-theme');
    if (stored) return stored;
    
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  });

  // Listen for system theme changes
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = (e) => {
      if (!localStorage.getItem('literati-theme')) {
        setTheme(e.matches ? 'dark' : 'light');
      }
    };

    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);

  // Apply theme to DOM
  useEffect(() => {
    const root = document.documentElement;
    root.setAttribute('data-theme', theme);
    
    // Also set class for compatibility
    root.classList.remove('light', 'dark');
    root.classList.add(theme);
    
    // Store user preference
    localStorage.setItem('literati-theme', theme);
  }, [theme]);

  // Theme switching functions
  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };

  const setLightTheme = () => setTheme('light');
  const setDarkTheme = () => setTheme('dark');
  
  const setSystemTheme = () => {
    localStorage.removeItem('literati-theme');
    setTheme(window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
  };

  // Dynamic color generation from book covers
  const generateThemeFromImage = async (imageUrl) => {
    try {
      // Create a canvas to extract dominant colors
      const img = new Image();
      img.crossOrigin = 'anonymous';
      
      return new Promise((resolve) => {
        img.onload = () => {
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          canvas.width = 100;
          canvas.height = 100;
          ctx.drawImage(img, 0, 0, 100, 100);
          
          const imageData = ctx.getImageData(0, 0, 100, 100);
          const data = imageData.data;
          
          // Simple dominant color extraction
          let r = 0, g = 0, b = 0;
          const pixelCount = data.length / 4;
          
          for (let i = 0; i < data.length; i += 4) {
            r += data[i];
            g += data[i + 1];
            b += data[i + 2];
          }
          
          r = Math.floor(r / pixelCount);
          g = Math.floor(g / pixelCount);
          b = Math.floor(b / pixelCount);
          
          // Convert to HSL for better color manipulation
          const hsl = rgbToHsl(r, g, b);
          
          // Generate Material 3 color scheme
          const primaryHue = hsl.h;
          const colors = generateMD3Palette(primaryHue);
          
          resolve(colors);
        };
        
        img.onerror = () => resolve(null);
        img.src = imageUrl;
      });
    } catch (error) {
      console.error('Error generating theme from image:', error);
      return null;
    }
  };

  // Apply dynamic colors to CSS custom properties
  const applyDynamicColors = (colors) => {
    if (!colors) return;
    
    const root = document.documentElement;
    Object.entries(colors).forEach(([key, value]) => {
      root.style.setProperty(`--md-dynamic-${key}`, value);
    });
  };

  // Memoized context value
  const contextValue = useMemo(() => ({
    theme,
    isLight: theme === 'light',
    isDark: theme === 'dark',
    toggleTheme,
    setLightTheme,
    setDarkTheme,
    setSystemTheme,
    generateThemeFromImage,
    applyDynamicColors,
  }), [theme]);

  return (
    <Material3ThemeContext.Provider value={contextValue}>
      {children}
    </Material3ThemeContext.Provider>
  );
};

// Helper functions for color manipulation
function rgbToHsl(r, g, b) {
  r /= 255;
  g /= 255;
  b /= 255;
  
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h, s, l = (max + min) / 2;
  
  if (max === min) {
    h = s = 0;
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
    }
    h /= 6;
  }
  
  return {
    h: Math.round(h * 360),
    s: Math.round(s * 100),
    l: Math.round(l * 100)
  };
}

function generateMD3Palette(hue) {
  // Simplified Material 3 palette generation
  // In production, use @material/material-color-utilities
  return {
    primary: `hsl(${hue}, 70%, 50%)`,
    'primary-container': `hsl(${hue}, 70%, 90%)`,
    secondary: `hsl(${(hue + 60) % 360}, 30%, 60%)`,
    'secondary-container': `hsl(${(hue + 60) % 360}, 30%, 95%)`,
    tertiary: `hsl(${(hue + 120) % 360}, 40%, 65%)`,
    'tertiary-container': `hsl(${(hue + 120) % 360}, 40%, 95%)`,
  };
}

export default Material3ThemeProvider;