import React, { useEffect, useState, useMemo } from 'react';
import API from './config/api';
import { useAuth } from './contexts/AuthContext';
import Login from './components/Login';
import BookNotesSystem from './components/gamification/BookNotesSystem';
import { usePWA } from './hooks/usePWA';

import InstallPrompt from './components/PWA/InstallPrompt';
import OfflineIndicator from './components/PWA/OfflineIndicator';
import NotificationPrompt from './components/PWA/NotificationPrompt';

// Simple theme hook replacement
const useSimpleTheme = () => {
  const [isDark, setIsDark] = useState(() => {
    const saved = localStorage.getItem('theme');
    if (saved) return saved === 'dark';
    return window.matchMedia('(prefers-color-scheme: dark)').matches;
  });
  
  React.useEffect(() => {
    const root = document.documentElement;
    if (isDark) {
      root.classList.add('dark');
    } else {
      root.classList.remove('dark');
    }
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  }, [isDark]);
  
  return {
    isDark,
    toggle: () => setIsDark(!isDark)
  };
};

// Simple ripple hook replacement
const useSimpleRipple = () => {
  const [ripples, setRipples] = useState([]);
  
  const addRipple = React.useCallback((event) => {
    const rect = event.currentTarget.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;
    
    const newRipple = {
      x, y, size,
      id: Date.now() + Math.random()
    };
    
    setRipples(prev => [...prev, newRipple]);
    
    setTimeout(() => {
      setRipples(prev => prev.filter(ripple => ripple.id !== newRipple.id));
    }, 600);
  }, []);
  
  const RippleContainer = ({ children, className = '', ...props }) => (
    <div
      className={`relative overflow-hidden ${className}`}
      onMouseDown={addRipple}
      {...props}
    >
      {children}
      {ripples.map(ripple => (
        <span
          key={ripple.id}
          className="absolute rounded-full bg-current opacity-30 pointer-events-none animate-ping"
          style={{
            left: ripple.x,
            top: ripple.y,
            width: ripple.size,
            height: ripple.size,
            animationDuration: '600ms'
          }}
        />
      ))}
    </div>
  );
  
  return { RippleContainer };
};

// Simple components
const SimpleButton = ({ variant = 'filled', size = 'medium', children, disabled = false, className = '', ...props }) => {
  const baseClass = variant === 'filled' ? 'btn-filled' : 
                   variant === 'outlined' ? 'btn-outlined' : 'btn-text';
  
  return (
    <button 
      className={`${baseClass} ${className}`} 
      disabled={disabled} 
      {...props}
    >
      {children}
    </button>
  );
};

const SimpleCard = ({ variant = 'elevated', className = '', children, ...props }) => {
  const baseClass = variant === 'elevated' ? 'card-elevated' : 'card';
  
  return (
    <div className={`${baseClass} ${className}`} {...props}>
      {children}
    </div>
  );
};

const SimpleChip = ({ status, children, className = '', ...props }) => {
  const statusClasses = {
    currently_reading: 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300',
    completed: 'bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300',
    want_to_read: 'bg-gray-100 text-gray-700 dark:bg-gray-800/30 dark:text-gray-300'
  };
  
  const statusConfig = {
    currently_reading: { label: 'Reading', icon: '📖' },
    completed: { label: 'Completed', icon: '✅' },
    want_to_read: { label: 'Want to Read', icon: '📚' }
  };
  
  const config = statusConfig[status] || statusConfig.want_to_read;
  const colorClass = statusClasses[status] || statusClasses.want_to_read;
  
  return (
    <span className={`chip inline-flex items-center gap-1.5 text-label-small font-medium ${colorClass} ${className}`} {...props}>
      <span>{config.icon}</span>
      <span>{children || config.label}</span>
    </span>
  );
};

const SimpleProgressBar = ({ progress = 0, className = '', ...props }) => {
  return (
    <div className={`progress-bar ${className}`} {...props}>
      <div 
        className="progress-fill" 
        style={{ width: `${Math.max(0, Math.min(100, progress))}%` }}
      />
    </div>
  );
};

// Enhanced mock data with growth tracking
const mockAnalytics = {
  totalBooks: 0,
  booksRead: 0,
  readingTime: 425,
  currentStreak: 12,
  longestStreak: 28,
  totalReadingTime: 2840,
  pagesRead: 1240,
  readingLevel: 15,
  readingXP: 2840,
  nextLevelXP: 3000,
  
  activityCalendar: Array.from({ length: 30 }, (_, i) => ({
    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000),
    minutes: Math.floor(Math.random() * 120),
    intensity: Math.floor(Math.random() * 4)
  })),
  
  monthlyProgress: [
    { month: 'Jan', books: 2, goal: 2 },
    { month: 'Feb', books: 3, goal: 2 },
    { month: 'Mar', books: 1, goal: 2 },
    { month: 'Apr', books: 4, goal: 2 },
    { month: 'May', books: 2, goal: 2 },
    { month: 'Jun', books: 3, goal: 2 }
  ],
  
  achievements: [
    { id: 1, name: 'First Steps', description: 'Read your first book', unlocked: true, icon: '🎯' },
    { id: 2, name: 'Bookworm', description: 'Read 10 books', unlocked: true, icon: '📚' },
    { id: 3, name: 'Speed Reader', description: 'Read 5 books in a month', unlocked: false, icon: '⚡' },
    { id: 4, name: 'Night Owl', description: 'Read past midnight 10 times', unlocked: true, icon: '🦉' },
    { id: 5, name: 'Streak Master', description: 'Maintain 30-day reading streak', unlocked: false, icon: '🔥' },
    { id: 6, name: 'Genre Explorer', description: 'Read 5 different genres', unlocked: false, icon: '🌍' }
  ],
  
  favoriteGenres: [
    { name: 'Fiction', count: 0, color: 'bg-blue-500' },
    { name: 'Non-Fiction', count: 0, color: 'bg-green-500' },
    { name: 'Technology', count: 0, color: 'bg-purple-500' },
    { name: 'Science', count: 0, color: 'bg-yellow-500' }
  ],
  
  weeklyProgress: [
    { day: 'Mon', minutes: 45 },
    { day: 'Tue', minutes: 60 },
    { day: 'Wed', minutes: 30 },
    { day: 'Thu', minutes: 75 },
    { day: 'Fri', minutes: 90 },
    { day: 'Sat', minutes: 120 },
    { day: 'Sun', minutes: 85 }
  ]
};

function App() {
  // ===== PWA HOOK =====
  const { setBadge, clearBadge } = usePWA();
  
  // ===== SIMPLE THEME =====
  const theme = useSimpleTheme();
  
  // ===== AUTH AND STATE =====
  const { user, loading: authLoading, logout, token } = useAuth();
  
  // All useState hooks
  const [analytics, setAnalytics] = useState(mockAnalytics);
  const [books, setBooks] = useState([]);
  const [form, setForm] = useState({ 
    title: '', 
    author: '', 
    format: 'PDF', 
    genre: 'General' 
  });
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showUploadForm, setShowUploadForm] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterGenre, setFilterGenre] = useState('all');
  const [activeTab, setActiveTab] = useState('overview');
  const [dragActive, setDragActive] = useState(false);
  
  // NEW STATE VARIABLES FOR ADDITIONAL TABS
  const [stats, setStats] = useState(null);
  const [achievements, setAchievements] = useState([]);
  const [goals, setGoals] = useState([]);
  const [showGoalForm, setShowGoalForm] = useState(false);
  const [libraryView, setLibraryView] = useState('grid'); // 'grid' or 'list'

  // ===== PWA BADGE UPDATE =====
  useEffect(() => {
    const updateBadge = async () => {
      try {
        const response = await fetch(`${API}/books/unread-count`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        const { count } = await response.json();
        setBadge(count);
      } catch (error) {
        clearBadge();
      }
    };

    if (user && token) {
      updateBadge();
      const interval = setInterval(updateBadge, 60000);
      return () => clearInterval(interval);
    }
  }, [setBadge, clearBadge, user, token]);

  // ===== COMPUTED VALUES =====
  const filteredBooks = useMemo(() => {
    return books.filter(book => {
      const matchesSearch = book.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           book.author.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesGenre = filterGenre === 'all' || book.genre === filterGenre;
      return matchesSearch && matchesGenre;
    });
  }, [books, searchQuery, filterGenre]);

  // ===== API FUNCTIONS =====
  const fetchBooks = async () => {
    try {
      const response = await fetch(`${API}/books`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      if (Array.isArray(data)) {
        setBooks(data);
        setAnalytics(prev => ({
          ...prev,
          totalBooks: data.length,
          booksRead: Math.floor(data.length * 0.7),
        }));
      } else {
        setBooks([]);
      }
    } catch (error) {
      console.error('Error fetching books:', error);
      setBooks([]);
    }
  };

  // NEW FETCH FUNCTIONS
// Replace fetchStats function
const fetchStats = async () => {
  if (!token) return;
  
  try {
    const response = await fetch(`${API}/stats`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      console.warn('Stats endpoint error, using defaults');
      setStats({
        stats: {
          total_books_read: books.length || 0,
          total_pages_read: 0,
          total_reading_time: 0,
          current_streak: 0,
          longest_streak: 0,
          reading_level: 1,
          total_xp: 0,
          notes_created: 0,
          highlights_made: 0,
          bookmarks_saved: 0
        },
        activity: [],
        genreStats: {}
      });
      return;
    }
    
    const data = await response.json();
    setStats(data);
    
    // Update analytics with real stats
    setAnalytics(prev => ({
      ...prev,
      totalBooks: data.stats?.total_books_read || prev.totalBooks,
      booksRead: data.stats?.total_books_read || prev.booksRead,
      readingTime: data.stats?.total_reading_time || prev.readingTime,
      currentStreak: data.stats?.current_streak || prev.currentStreak,
      longestStreak: data.stats?.longest_streak || prev.longestStreak,
      totalReadingTime: data.stats?.total_reading_time || prev.totalReadingTime,
      pagesRead: data.stats?.total_pages_read || prev.pagesRead,
      readingLevel: data.stats?.reading_level || prev.readingLevel,
      readingXP: data.stats?.total_xp || prev.readingXP,
    }));
  } catch (error) {
    console.error('Error fetching stats:', error);
    setStats({
      stats: {
        total_books_read: 0,
        total_pages_read: 0,
        total_reading_time: 0,
        current_streak: 0,
        longest_streak: 0,
        reading_level: 1,
        total_xp: 0,
        notes_created: 0,
        highlights_made: 0,
        bookmarks_saved: 0
      },
      activity: [],
      genreStats: {}
    });
  }
};

// Replace fetchAchievements function
const fetchAchievements = async () => {
  if (!token) return;
  
  try {
    const response = await fetch(`${API}/achievements`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      console.warn('Achievements endpoint error, using defaults');
      setAchievements([]);
      return;
    }
    
    const data = await response.json();
    setAchievements(data);
    
    // Update analytics achievements if needed
    if (data.length > 0) {
      setAnalytics(prev => ({
        ...prev,
        achievements: data.map(a => ({
          id: a.id || a.achievement_id,
          name: a.achievement_name || a.name,
          description: a.achievement_description || a.description,
          icon: a.achievement_icon || a.icon || '🏆',
          unlocked: a.unlocked || !!a.unlocked_at
        }))
      }));
    }
  } catch (error) {
    console.error('Error fetching achievements:', error);
    setAchievements([]);
  }
};

// Replace fetchGoals function
const fetchGoals = async () => {
  if (!token) return;
  
  try {
    const response = await fetch(`${API}/goals`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      console.warn('Goals endpoint error, using defaults');
      setGoals([]);
      return;
    }
    
    const data = await response.json();
    setGoals(data);
  } catch (error) {
    console.error('Error fetching goals:', error);
    setGoals([]);
  }
};
  // UPDATED useEffect to call all fetch functions
  useEffect(() => {
    if (user && token) {
      fetchBooks();
      fetchStats();
      fetchAchievements();
      fetchGoals();
    }
  }, [user, token]);

  // ===== LOADING STATE =====
  if (authLoading) {
    return (
      <div className="min-h-screen bg-md-background flex items-center justify-center">
        <SimpleCard variant="elevated" className="p-8 text-center">
          <div className="relative mb-6">
            <div className="w-16 h-16 border-4 border-md-outline-variant rounded-full mx-auto"></div>
            <div className="w-16 h-16 border-4 border-md-primary rounded-full animate-spin absolute top-0 left-1/2 transform -translate-x-1/2 border-t-transparent"></div>
          </div>
          <p className="text-title-medium text-md-on-surface font-medium">Loading your library...</p>
        </SimpleCard>
      </div>
    );
  }

  // ===== NOT AUTHENTICATED =====
  if (!user) {
    return <Login />;
  }

  // ===== EVENT HANDLERS =====
  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleFileChange = e => {
    setFile(e.target.files[0]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file) {
      alert('Please select a file to upload.');
      return;
    }

    setLoading(true);

    const formData = new FormData();
    formData.append('title', form.title);
    formData.append('author', form.author);
    formData.append('format', form.format);
    formData.append('genre', form.genre);
    formData.append('file', file);

    try {
      const response = await fetch(`${API}/upload-book`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData,
      });
      
      if (response.ok) {
        setForm({ title: '', author: '', format: 'PDF', genre: 'General' });
        setFile(null);
        setShowUploadForm(false);
        await fetchBooks();
      } else {
        const errorData = await response.json();
        console.error('Upload failed:', errorData);
        alert(errorData.error || 'Upload failed. Please try again.');
      }
    } catch (error) {
      console.error('Error uploading book:', error);
      alert('Error uploading book. Please try again.');
    }

    setLoading(false);
  };

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const droppedFile = e.dataTransfer.files[0];
      if (droppedFile.type === 'application/pdf' || droppedFile.name.endsWith('.epub')) {
        setFile(droppedFile);
        setShowUploadForm(true);
      }
    }
  };

  // ===== MATERIAL 3 COMPONENTS =====
  
  const StatCard = ({ title, value, subtitle, icon, gradient = "primary", trend = null }) => {
    const { RippleContainer } = useSimpleRipple();
    
    const gradientClasses = {
      primary: "bg-gradient-to-br from-md-primary-container to-md-primary-container/50",
      secondary: "bg-gradient-to-br from-md-secondary-container to-md-secondary-container/50", 
      tertiary: "bg-gradient-to-br from-md-tertiary-container to-md-tertiary-container/50",
      surface: "bg-md-surface-container-high"
    };

    return (
      <RippleContainer className={`
        card-elevated p-6 cursor-pointer
        ${gradientClasses[gradient] || gradientClasses.surface}
        hover:scale-[1.02] motion-emphasized
      `}>
        <div className="flex items-center justify-between">
          <div>
            <p className="text-label-large font-medium text-md-on-surface-variant">{title}</p>
            <p className="text-display-small font-bold text-md-on-surface mt-1">{value}</p>
            {subtitle && (
              <p className="text-body-small text-md-on-surface-variant mt-1">{subtitle}</p>
            )}
            {trend && (
              <div className={`text-label-small mt-2 flex items-center gap-1 ${
                trend.positive ? 'text-md-secondary' : 'text-md-error'
              }`}>
                <span>{trend.positive ? '📈' : '📉'}</span>
                <span>{trend.value}</span>
              </div>
            )}
          </div>
          <div className="text-4xl opacity-80">{icon}</div>
        </div>
      </RippleContainer>
    );
  };

  const ReadingStreakCard = () => (
    <SimpleCard variant="elevated" className="p-6 bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20 border border-orange-200 dark:border-orange-800">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-headline-small font-semibold text-md-on-surface">Reading Streak</h3>
        <div className="text-2xl">🔥</div>
      </div>
      
      <div className="text-center mb-4">
        <div className="text-display-medium font-bold text-orange-600 dark:text-orange-400 mb-1">
          {analytics.currentStreak}
        </div>
        <div className="text-body-medium text-md-on-surface-variant">Current Streak</div>
        <div className="text-body-small text-md-on-surface-variant mt-1">
          Best: {analytics.longestStreak} days
        </div>
      </div>
      
      <div className="grid grid-cols-7 gap-1 mb-4">
        {analytics.activityCalendar.slice(-21).map((day, index) => (
          <div
            key={index}
            className={`w-3 h-3 rounded-sm transition-colors ${
              day.intensity === 0 ? 'bg-md-surface-container-highest' :
              day.intensity === 1 ? 'bg-orange-200 dark:bg-orange-800' :
              day.intensity === 2 ? 'bg-orange-400 dark:bg-orange-600' :
              'bg-orange-600 dark:bg-orange-500'
            }`}
            title={`${day.minutes} minutes`}
          />
        ))}
      </div>
      
      <div className="text-center">
        <SimpleButton variant="text" size="small">
          View Full Calendar
        </SimpleButton>
      </div>
    </SimpleCard>
  );

  const ReadingLevelCard = () => (
    <SimpleCard variant="elevated" className="p-6 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 border border-blue-200 dark:border-blue-800">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-headline-small font-semibold text-md-on-surface">Reading Level</h3>
        <div className="text-2xl">📚</div>
      </div>
      
      <div className="text-center mb-4">
        <div className="text-display-medium font-bold text-blue-600 dark:text-blue-400 mb-1">
          {analytics.readingLevel}
        </div>
        <div className="text-body-medium text-md-on-surface-variant">Current Level</div>
      </div>
      
      <div className="mb-4">
        <div className="flex justify-between text-body-small text-md-on-surface-variant mb-2">
          <span>XP Progress</span>
          <span>{analytics.readingXP} / {analytics.nextLevelXP}</span>
        </div>
        <SimpleProgressBar 
          progress={(analytics.readingXP / analytics.nextLevelXP) * 100}
          className="h-2"
        />
      </div>
      
      <div className="text-center">
        <SimpleButton variant="text" size="small">
          View Achievements
        </SimpleButton>
      </div>
    </SimpleCard>
  );

  const MonthlyGoalsChart = () => (
    <SimpleCard variant="elevated" className="p-6">
      <h3 className="text-headline-small font-semibold text-md-on-surface mb-6">Monthly Goals</h3>
      <div className="space-y-4">
        {analytics.monthlyProgress.map((month, index) => (
          <div key={index} className="relative">
            <div className="flex justify-between items-center mb-2">
              <span className="text-body-medium font-medium text-md-on-surface">{month.month}</span>
              <div className="relative">
                <span className="text-body-small text-md-on-surface-variant">
                  {month.books}/{month.goal} books
                </span>
                {month.books > month.goal && (
                  <span className="absolute -top-1 -right-1 text-xs">🎉</span>
                )}
              </div>
            </div>
            <div className="relative h-2 bg-md-surface-container-highest rounded-full overflow-hidden">
              <div
                className={`h-full rounded-full transition-all duration-long-2 ease-emphasized ${
                  month.books >= month.goal ? 'bg-md-secondary' : 'bg-md-primary'
                }`}
                style={{ width: `${Math.min((month.books / month.goal) * 100, 100)}%` }}
              />
            </div>
          </div>
        ))}
      </div>
      
      <div className="mt-6 p-4 bg-md-primary-container rounded-xl">
        <div className="text-body-medium font-medium text-md-on-primary-container">June Goal Progress</div>
        <div className="text-body-small text-md-on-primary-container mt-1">
          You're {analytics.monthlyProgress[5].books >= analytics.monthlyProgress[5].goal ? 'ahead of' : 'behind'} your monthly target!
        </div>
      </div>
    </SimpleCard>
  );

  const AchievementsCard = () => (
    <SimpleCard variant="elevated" className="p-6">
      <h3 className="text-headline-small font-semibold text-md-on-surface mb-4">Achievements</h3>
      <div className="grid grid-cols-3 gap-3">
        {analytics.achievements.map(achievement => (
          <div
            key={achievement.id}
            className={`p-3 rounded-xl text-center transition-all motion-emphasized ${
              achievement.unlocked 
                ? 'bg-md-tertiary-container border border-md-outline-variant' 
                : 'bg-md-surface-container border border-md-outline-variant opacity-60'
            }`}
          >
            <div className="text-2xl mb-1">{achievement.icon}</div>
            <div className="text-label-small font-medium text-md-on-surface">{achievement.name}</div>
            <div className="text-label-small text-md-on-surface-variant mt-1">{achievement.description}</div>
            {achievement.unlocked && (
              <div className="text-label-small text-md-tertiary mt-1">✓ Unlocked</div>
            )}
          </div>
        ))}
      </div>
    </SimpleCard>
  );

  const WeeklyProgressChart = () => (
    <SimpleCard variant="elevated" className="p-6">
      <h3 className="text-headline-small font-semibold text-md-on-surface mb-4">This Week's Progress</h3>
      <div className="flex items-end justify-between h-32 mb-4">
        {analytics.weeklyProgress.map((day, index) => (
          <div key={index} className="flex flex-col items-center flex-1">
            <div 
              className="w-6 bg-md-primary rounded-t-md transition-all duration-medium-2 ease-emphasized hover:bg-md-primary/80"
              style={{ height: `${(day.minutes / 120) * 100}%` }}
              title={`${day.minutes} minutes`}
            />
            <span className="text-label-small text-md-on-surface-variant mt-2">{day.day}</span>
          </div>
        ))}
      </div>
      <div className="text-center text-body-small text-md-on-surface-variant">
        Total: {analytics.weeklyProgress.reduce((sum, day) => sum + day.minutes, 0)} minutes this week
      </div>
    </SimpleCard>
  );

// Update your BookCard component to support list view
const BookCard = ({ book, view = 'grid' }) => {
  if (view === 'list') {
    return (
      <div className="card-elevated p-4 hover:shadow-md transition-all motion-emphasized">
        <div className="flex items-center justify-between gap-4">
          <div className="flex items-center gap-4 flex-1">
            {/* Book Icon */}
            <div className="w-12 h-16 bg-md-primary-container rounded-lg flex items-center justify-center">
              <span className="text-2xl">📖</span>
            </div>
            
            {/* Book Info */}
            <div className="flex-1">
              <h3 className="text-title-medium font-semibold text-md-on-surface">{book.title}</h3>
              <p className="text-body-small text-md-on-surface-variant">{book.author}</p>
            </div>
            
            {/* Genre & Format */}
            <div className="flex items-center gap-2">
              <span className="text-xs bg-md-surface-container-highest text-md-on-surface px-3 py-1 rounded-full">
                {book.genre}
              </span>
              <span className={`px-2 py-1 text-xs rounded-full font-medium ${
                book.format === 'PDF' 
                  ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300' 
                  : 'bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300'
              }`}>
                {book.format}
              </span>
            </div>
            
            {/* Progress */}
            <div className="w-32">
              <div className="flex justify-between items-center mb-1">
                <span className="text-xs text-md-on-surface-variant">Progress</span>
                <span className="text-xs text-md-on-surface font-medium">{book.progress_percentage || 0}%</span>
              </div>
              <SimpleProgressBar progress={book.progress_percentage || 0} className="h-1.5" />
            </div>
          </div>
          
          {/* Actions */}
          <div className="flex items-center gap-2">
            <SimpleButton variant="text" size="small" className="text-xs">
              📖 Continue
            </SimpleButton>
            {book.file_url && (
              <a
                href={book.file_url}
                target="_blank"
                rel="noopener noreferrer"
                className="text-xs bg-md-primary text-md-on-primary px-3 py-1 rounded-full hover:bg-md-primary/80 transition-colors"
              >
                Open
              </a>
            )}
          </div>
        </div>
      </div>
    );
  }

  // Grid view (original design)
  return (
    <div className="card-hero p-4 cursor-pointer hover:scale-[1.02] motion-emphasized">
      <div className="flex items-start justify-between mb-3">
        <div className="flex-1">
          <h3 className="text-title-medium font-semibold text-md-on-surface line-clamp-2">{book.title}</h3>
          <p className="text-body-small text-md-on-surface-variant mt-1">{book.author}</p>
        </div>
        <span className={`px-2 py-1 text-xs rounded-full font-medium ${
          book.format === 'PDF' 
            ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300' 
            : 'bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300'
        }`}>
          {book.format}
        </span>
      </div>
      
      <div className="mb-3">
        <div className="flex justify-between items-center mb-1">
          <span className="text-xs text-md-on-surface-variant">Progress</span>
          <span className="text-xs text-md-on-surface">{book.progress_percentage || 0}%</span>
        </div>
        <SimpleProgressBar progress={book.progress_percentage || 0} className="h-1.5" />
      </div>

      <div className="flex items-center justify-between">
        <SimpleButton variant="text" size="small" className="text-xs">
          📖 Continue Reading
        </SimpleButton>
        {book.file_url && (
          <a
            href={book.file_url}
            target="_blank"
            rel="noopener noreferrer"
            className="text-xs bg-md-primary text-md-on-primary px-3 py-1 rounded-full hover:bg-md-primary/80 transition-colors"
          >
            Open
          </a>
        )}
      </div>
    </div>
  );
};

  // ===== MAIN RENDER =====
  return (
    <div className="min-h-screen bg-md-background material-scrollbar">
      {/* PWA Components */}
      <OfflineIndicator />
      <NotificationPrompt />
      <InstallPrompt />
      
      {/* Header */}
      <header className="surface border-b border-md-outline-variant shadow-elevation-1 sticky top-0 z-sticky backdrop-blur-md">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-3">
                <img
                  src="/literatiLOGO.png"
                  alt="Literati Logo"
                  className="h-26 w-auto"
                  loading="lazy"
                />
              </div>
              
              {/* Theme Toggle */}
              <SimpleButton 
                variant="text" 
                onClick={theme.toggle}
                className="p-2"
                title={`Switch to ${theme.isDark ? 'light' : 'dark'} mode`}
              >
                {theme.isDark ? '☀️' : '🌙'}
              </SimpleButton>
              
              <div className="hidden md:flex items-center space-x-2">
                <SimpleChip status="completed">
                  Level {analytics.readingLevel}
                </SimpleChip>
                <SimpleChip status="currently_reading">
                  🔥 {analytics.currentStreak} days
                </SimpleChip>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="relative">
                <input
                  type="search"
                  placeholder="Search books..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="
                    w-64 px-4 py-2 rounded-xl border border-md-outline
                    bg-md-surface-container-low text-md-on-surface
                    placeholder:text-md-on-surface-variant
                    focus:ring-2 focus:ring-md-primary focus:border-transparent
                    motion-standard
                  "
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                  <span className="text-md-on-surface-variant">🔍</span>
                </div>
              </div>
              
              <select
                value={filterGenre}
                onChange={(e) => setFilterGenre(e.target.value)}
                className="
                  px-4 py-2 border border-md-outline rounded-xl
                  bg-md-surface-container-low text-md-on-surface
                  focus:ring-2 focus:ring-md-primary focus:border-transparent
                  motion-standard
                "
              >
                <option value="all">All Genres</option>
                <option value="Fiction">Fiction</option>
                <option value="Non-Fiction">Non-Fiction</option>
                <option value="Technology">Technology</option>
                <option value="Science">Science</option>
                <option value="Business">Business</option>
                <option value="Self-Help">Self-Help</option>
                <option value="General">General</option>
              </select>
              
              <SimpleButton 
                variant="filled" 
                onClick={() => setShowUploadForm(!showUploadForm)}
                className="flex items-center gap-2"
              >
                <span>➕</span>
                Add Book
              </SimpleButton>
              
              <div className="flex items-center space-x-4">
                <span className="text-body-small text-md-on-surface-variant">
                  Welcome, {user?.name || 'User'}
                </span>
                <SimpleButton variant="text" onClick={logout} size="small">
                  Logout
                </SimpleButton>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* UPDATED Navigation Tabs - Added all new tabs */}
      <div className="max-w-7xl mx-auto px-6 py-4">
        <div className="flex space-x-6 border-b border-md-outline-variant overflow-x-auto">
          {[
            { id: 'overview', label: '📊 Overview' },
            { id: 'library', label: '📚 Library' },
            { id: 'notes', label: '📝 Book Notes' },
            { id: 'progress', label: '📈 Progress' },
            { id: 'goals', label: '🎯 Goals' },
            { id: 'achievements', label: '🏆 Achievements' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`
                pb-2 px-1 border-b-2 font-medium text-label-large motion-standard whitespace-nowrap
                ${activeTab === tab.id
                  ? 'border-md-primary text-md-primary'
                  : 'border-transparent text-md-on-surface-variant hover:text-md-on-surface'
                }
              `}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 pb-8">
        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <div className="space-y-8">
            {/* Stats Overview */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <StatCard
                title="Total Books"
                value={analytics.totalBooks}
                icon="📚"
                gradient="primary"
                trend={{ positive: true, value: '+2 this month' }}
              />
              <StatCard
                title="Books Read"
                value={analytics.booksRead}
                subtitle={`${analytics.totalBooks > 0 ? Math.round((analytics.booksRead / analytics.totalBooks) * 100) : 0}% completion`}
                icon="✅"
                gradient="secondary"
              />
              <StatCard
                title="Reading Time"
                value={`${Math.floor(analytics.readingTime / 60)}h ${analytics.readingTime % 60}m`}
                subtitle="This week"
                icon="⏰"
                gradient="tertiary"
                trend={{ positive: true, value: '+1.2h from last week' }}
              />
              <StatCard
                title="Pages Read"
                value={analytics.pagesRead}
                subtitle="Total pages"
                icon="📄"
                gradient="surface"
              />
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2 space-y-6">
                <MonthlyGoalsChart />
                <AchievementsCard />
              </div>
              
              <div className="space-y-6">
                <ReadingStreakCard />
                <ReadingLevelCard />
              </div>
            </div>
          </div>
        )}

{/* Replace your Library Tab content with this updated version: */}
{activeTab === 'library' && (
  <div className="space-y-6">
    <SimpleCard variant="elevated" className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-headline-small text-md-on-surface">
          Your Library ({filteredBooks.length} {filteredBooks.length === 1 ? 'book' : 'books'})
        </h2>
        <div className="flex items-center space-x-2">
          <SimpleButton 
            variant={libraryView === 'grid' ? 'filled' : 'text'} 
            size="small"
            onClick={() => setLibraryView('grid')}
            className="flex items-center gap-1"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
            </svg>
            Grid
          </SimpleButton>
          <SimpleButton 
            variant={libraryView === 'list' ? 'filled' : 'text'} 
            size="small"
            onClick={() => setLibraryView('list')}
            className="flex items-center gap-1"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
            List
          </SimpleButton>
        </div>
      </div>

      {filteredBooks.length > 0 ? (
        libraryView === 'grid' ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredBooks.map(book => (
              <BookCard key={book.id} book={book} view="grid" />
            ))}
          </div>
        ) : (
          <div className="space-y-3">
            {filteredBooks.map(book => (
              <BookCard key={book.id} book={book} view="list" />
            ))}
          </div>
        )
      ) : searchQuery || filterGenre !== 'all' ? (
        <div className="text-center py-12">
          <div className="text-4xl mb-4">🔍</div>
          <h3 className="text-headline-small text-md-on-surface mb-2">No books found</h3>
          <p className="text-body-medium text-md-on-surface-variant">
            Try adjusting your search or filters
          </p>
        </div>
      ) : (
        <div 
          className={`
            border-2 border-dashed rounded-xl p-12 text-center 
            motion-emphasized
            ${dragActive 
              ? 'border-md-primary bg-md-primary-container/20' 
              : 'border-md-outline-variant'
            }
          `}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          <div className="text-4xl mb-4">📚</div>
          <h3 className="text-headline-small text-md-on-surface mb-2">
            No books yet
          </h3>
          <p className="text-body-medium text-md-on-surface-variant mb-4">
            Start building your digital library by adding your first book
          </p>
          <p className="text-body-small text-md-on-surface-variant">
            Drag and drop PDF or EPUB files here, or click "Add Book"
          </p>
        </div>
      )}
    </SimpleCard>
  </div>
)}

        {/* NEW: Book Notes Tab */}
        {activeTab === 'notes' && (
          <BookNotesSystem books={books} />
        )}

        {/* Progress Tab - Updated with more content */}
        {activeTab === 'progress' && (
          <div className="space-y-6">
            <SimpleCard variant="elevated" className="p-6">
              <h3 className="text-headline-small text-md-on-surface mb-4">Reading Progress</h3>
              {stats ? (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="text-center">
                    <div className="text-3xl font-bold text-md-primary">{stats.stats?.total_books_read || 0}</div>
                    <div className="text-sm text-md-on-surface-variant">Books Read</div>
                  </div>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-md-secondary">{stats.stats?.total_pages_read || 0}</div>
                    <div className="text-sm text-md-on-surface-variant">Pages Read</div>
                  </div>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-md-tertiary">{Math.floor((stats.stats?.total_reading_time || 0) / 60)}h</div>
                    <div className="text-sm text-md-on-surface-variant">Reading Time</div>
                  </div>
                </div>
              ) : (
                <p className="text-md-on-surface-variant">Loading stats...</p>
              )}
            </SimpleCard>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <ReadingStreakCard />
              <WeeklyProgressChart />
            </div>
          </div>
        )}

        {/* NEW: Goals Tab */}
        {activeTab === 'goals' && (
          <div className="space-y-6">
            <SimpleCard variant="elevated" className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-headline-small text-md-on-surface">Your Reading Goals</h2>
                <SimpleButton 
                  variant="filled"
                  onClick={() => setShowGoalForm(true)}
                  className="flex items-center gap-2"
                >
                  <span>+</span>
                  New Goal
                </SimpleButton>
              </div>
              
              <div className="space-y-4">
                {goals.length > 0 ? (
                  goals.map(goal => (
                    <div key={goal.id} className="p-4 border border-md-outline-variant rounded-xl">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-medium text-md-on-surface">{goal.title}</h3>
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          goal.completed 
                            ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300' 
                            : 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300'
                        }`}>
                          {goal.completed ? 'Completed' : 'In Progress'}
                        </span>
                      </div>
                      <p className="text-sm text-md-on-surface-variant mb-2">{goal.description}</p>
                      <div className="w-full bg-md-surface-container-highest rounded-full h-2">
                        <div 
                          className="bg-md-primary h-2 rounded-full transition-all duration-300" 
                          style={{ width: `${((goal.current_progress || 0) / goal.target) * 100}%` }}
                        />
                      </div>
                      <div className="flex justify-between text-xs text-md-on-surface-variant mt-1">
                        <span>{goal.current_progress || 0}/{goal.target}</span>
                        <span>{Math.round(((goal.current_progress || 0) / goal.target) * 100)}%</span>
                      </div>
                    </div>
                  ))
                ) : (
                  <p className="text-md-on-surface-variant text-center py-8">
                    No goals yet. Create your first reading goal!
                  </p>
                )}
              </div>
            </SimpleCard>
          </div>
        )}

        {/* NEW: Achievements Tab */}
        {activeTab === 'achievements' && (
          <div className="space-y-6">
            <SimpleCard variant="elevated" className="p-6">
              <h3 className="text-headline-small text-md-on-surface mb-6">Your Achievements</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {achievements.length > 0 ? (
                  achievements.map(achievement => (
                    <div
                      key={achievement.id || achievement.achievement_id}
                      className={`p-4 rounded-xl text-center transition-all ${
                        achievement.unlocked 
                          ? 'bg-gradient-to-br from-yellow-50 to-amber-50 dark:from-yellow-950/20 dark:to-amber-950/20 border-2 border-yellow-300 dark:border-yellow-700' 
                          : 'bg-md-surface-container border-2 border-md-outline-variant opacity-60'
                      }`}
                    >
                      <div className="text-3xl mb-2">
                        {achievement.achievement_icon || achievement.icon || '🏆'}
                      </div>
                      <h4 className="font-medium text-sm text-md-on-surface mb-1">
                        {achievement.achievement_name || achievement.name}
                      </h4>
                      <p className="text-xs text-md-on-surface-variant">
                        {achievement.achievement_description || achievement.description}
                      </p>
                      {achievement.unlocked && (
                        <div className="text-xs text-yellow-600 dark:text-yellow-400 font-medium mt-2">
                          ✓ Unlocked
                        </div>
                      )}
                      {achievement.progress !== undefined && !achievement.unlocked && (
                        <div className="mt-2">
                          <div className="text-xs text-md-on-surface-variant">
                            {achievement.progress}/{achievement.target}
                          </div>
                        </div>
                      )}
                    </div>
                  ))
                ) : (
                  <p className="text-md-on-surface-variant col-span-full text-center py-8">
                    Start reading to unlock achievements!
                  </p>
                )}
              </div>
            </SimpleCard>
          </div>
        )}
      </div>

      {/* Upload Form Modal */}
      {showUploadForm && (
        <div className="fixed inset-0 bg-md-scrim/50 backdrop-blur-sm flex items-center justify-center p-4 z-modal">
          <SimpleCard variant="elevated" className="max-w-md w-full p-6 motion-emphasized">
            <h2 className="text-headline-medium text-md-on-surface mb-6">
              Add New Book
            </h2>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-label-large font-medium text-md-on-surface mb-2">
                  Book Title
                </label>
                <input
                  type="text"
                  name="title"
                  value={form.title}
                  onChange={handleChange}
                  placeholder="Enter book title"
                  required
                  className="
                    w-full px-3 py-2 rounded-xl border border-md-outline
                    bg-md-surface-container-low text-md-on-surface
                    placeholder:text-md-on-surface-variant
                    focus:ring-2 focus:ring-md-primary focus:border-transparent
                    motion-standard
                  "
                />
              </div>

              <div>
                <label className="block text-label-large font-medium text-md-on-surface mb-2">
                  Author
                </label>
                <input
                  type="text"
                  name="author"
                  value={form.author}
                  onChange={handleChange}
                  placeholder="Enter author name"
                  required
                  className="
                    w-full px-3 py-2 rounded-xl border border-md-outline
                    bg-md-surface-container-low text-md-on-surface
                    placeholder:text-md-on-surface-variant
                    focus:ring-2 focus:ring-md-primary focus:border-transparent
                    motion-standard
                  "
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-label-large font-medium text-md-on-surface mb-2">
                    Format
                  </label>
                  <select
                    name="format"
                    value={form.format}
                    onChange={handleChange}
                    className="
                      w-full px-3 py-2 rounded-xl border border-md-outline
                      bg-md-surface-container-low text-md-on-surface
                      focus:ring-2 focus:ring-md-primary focus:border-transparent
                      motion-standard
                    "
                  >
                    <option value="PDF">PDF</option>
                    <option value="ePub">ePub</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-label-large font-medium text-md-on-surface mb-2">
                    Genre
                  </label>
                  <select
                    name="genre"
                    value={form.genre}
                    onChange={handleChange}
                    className="
                      w-full px-3 py-2 rounded-xl border border-md-outline
                      bg-md-surface-container-low text-md-on-surface
                      focus:ring-2 focus:ring-md-primary focus:border-transparent
                      motion-standard
                    "
                  >
                    <option value="General">General</option>
                    <option value="Fiction">Fiction</option>
                    <option value="Non-Fiction">Non-Fiction</option>
                    <option value="Technology">Technology</option>
                    <option value="Science">Science</option>
                    <option value="Business">Business</option>
                    <option value="Self-Help">Self-Help</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-label-large font-medium text-md-on-surface mb-2">
                  Book File
                </label>
                <input
                  type="file"
                  onChange={handleFileChange}
                  accept=".pdf,.epub"
                  required
                  className="
                    w-full px-3 py-2 rounded-xl border border-md-outline
                    bg-md-surface-container-low text-md-on-surface
                    focus:ring-2 focus:ring-md-primary focus:border-transparent
                    motion-standard
                    file:mr-4 file:py-2 file:px-4
                    file:rounded-md file:border-0
                    file:text-label-medium file:font-medium
                    file:bg-md-primary-container file:text-md-on-primary-container
                    hover:file:bg-md-primary-container/80
                  "
                />
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <SimpleButton
                  type="button"
                  variant="text"
                  onClick={() => setShowUploadForm(false)}
                >
                  Cancel
                </SimpleButton>
                <SimpleButton
                  type="submit"
                  variant="filled"
                  disabled={loading}
                >
                  {loading ? (
                    <span className="flex items-center gap-2">
                      <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
                      Uploading...
                    </span>
                  ) : (
                    'Add Book'
                  )}
                </SimpleButton>
              </div>
            </form>
          </SimpleCard>
        </div>
      )}

      {/* Floating Action Button */}
      <button
        onClick={() => setShowUploadForm(true)}
        className="
          fab fixed bottom-6 right-6 z-fab
          hover:scale-110 active:scale-95 motion-emphasized
        "
        title="Add new book"
      >
        <span className="text-xl">➕</span>
      </button>
    </div>
  );
}

export default App;