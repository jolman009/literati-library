//First UI Dashboard App.jsx

import React, { useEffect, useState, useMemo } from 'react';
import API from './config/api';
import { useAuth } from './contexts/AuthContext';
import { useGamification } from './contexts/GamificationContext';
import Login from './components/Login';

// Import the new gamification components
import BookNotesSystem from './components/gamification/BookNotesSystem';
import AchievementSystem from './components/gamification/AchievementSystem';
import GoalSystem from './components/gamification/GoalSystem';
import GamificationDashboard from './components/gamification/GamificationDashboard';

function App() {
  // ===== HOOKS =====
  const { user, loading: authLoading, logout, token } = useAuth();
  const { 
    stats, 
    analytics, 
    achievements,
    loading, 
    updateAnalyticsWithBooks,
    recordReadingSession 
  } = useGamification();
  
  // Local state for books and UI
  const [books, setBooks] = useState([]);
  const [form, setForm] = useState({ title: '', author: '', format: 'PDF', genre: 'General' });
  const [file, setFile] = useState(null);
  const [bookLoading, setBookLoading] = useState(false);
  const [showUploadForm, setShowUploadForm] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');
  const [searchQuery, setSearchQuery] = useState('');
  const [filterGenre, setFilterGenre] = useState('all');

  // Filtered books
  const filteredBooks = useMemo(() => {
    return books.filter(book => {
      const matchesSearch = searchQuery.trim() === '' || 
        book.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        book.author.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesGenre = filterGenre === 'all' || book.genre === filterGenre;
      
      return matchesSearch && matchesGenre;
    });
  }, [books, searchQuery, filterGenre]);

  // Fetch books function
  const fetchBooks = async () => {
    if (!token) return;
    
    try {
      const response = await fetch(`${API}/books`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      setBooks(data);
      
      // Update gamification context with books data
      updateAnalyticsWithBooks(data);
      
    } catch (error) {
      console.error('Error fetching books:', error);
      if (!error.message.includes('401')) {
        alert('Error loading books. Please try refreshing the page.');
      }
    }
  };

  // Initialize data
  useEffect(() => {
    if (user && token) {
      fetchBooks();
    }
  }, [user, token]);

  // Loading state
  if (authLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-4xl mb-4">📚</div>
          <div className="text-xl font-semibold text-gray-900">Loading your library...</div>
        </div>
      </div>
    );
  }

  // Not authenticated
  if (!user) {
    return <Login />;
  }

  // Event handlers
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file) {
      alert('Please select a file');
      return;
    }

    setBookLoading(true);

    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('title', form.title);
      formData.append('author', form.author);
      formData.append('format', form.format);
      formData.append('genre', form.genre);

      const response = await fetch(`${API}/upload-book`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` },
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Upload failed');
      }

      // Reset form and refresh
      setForm({ title: '', author: '', format: 'PDF', genre: 'General' });
      setFile(null);
      setShowUploadForm(false);
      await fetchBooks();
      
      alert('Book uploaded successfully!');
    } catch (error) {
      console.error('Error uploading book:', error);
      alert('Error uploading book. Please try again.');
    }

    setBookLoading(false);
  };

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const droppedFile = e.dataTransfer.files[0];
      if (droppedFile.type === 'application/pdf' || droppedFile.name.endsWith('.epub')) {
        setFile(droppedFile);
        setShowUploadForm(true);
      }
    }
  };

  // Handle reading session tracking
  const handleContinueReading = async (book) => {
    try {
      // Example: record a 30-minute reading session
      await recordReadingSession({
        book_id: book.id,
        duration: 30, // minutes
        pages_read: 10, // estimated
        start_page: null,
        end_page: null
      });
      
      // Open the book
      if (book.file_url) {
        window.open(book.file_url, '_blank');
      }
    } catch (error) {
      console.error('Error tracking reading session:', error);
      // Still open the book even if tracking fails
      if (book.file_url) {
        window.open(book.file_url, '_blank');
      }
    }
  };

  // Component definitions (using gamification data)
  const StatCard = ({ title, value, subtitle, icon, color = "bg-white", trend = null }) => (
    <div className={`${color} rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-all hover:scale-105`}>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className="text-2xl font-bold text-gray-900 mt-1">{value}</p>
          {subtitle && <p className="text-xs text-gray-500 mt-1">{subtitle}</p>}
          {trend && (
            <div className={`text-xs mt-1 ${trend.positive ? 'text-green-600' : 'text-red-600'}`}>
              {trend.positive ? '↗️' : '↘️'} {trend.value}
            </div>
          )}
        </div>
        <div className="text-2xl">{icon}</div>
      </div>
    </div>
  );

  const ReadingStreakCard = () => (
    <div className="bg-gradient-to-br from-orange-50 to-red-50 rounded-xl p-6 border border-orange-100">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900">Reading Streak</h3>
        <div className="text-2xl">🔥</div>
      </div>
      
      <div className="text-center mb-4">
        <div className="text-3xl font-bold text-orange-600 mb-1">{stats.currentStreak}</div>
        <div className="text-sm text-gray-600">Current Streak</div>
        <div className="text-xs text-gray-500 mt-1">
          Best: {stats.longestStreak} days
        </div>
      </div>
      
      <div className="grid grid-cols-7 gap-1 mb-4">
        {analytics.activityCalendar.slice(-21).map((day, index) => (
          <div
            key={index}
            className={`w-3 h-3 rounded-sm ${
              day.intensity === 0 ? 'bg-gray-200' :
              day.intensity === 1 ? 'bg-orange-200' :
              day.intensity === 2 ? 'bg-orange-400' :
              'bg-orange-600'
            }`}
            title={`${day.date.toLocaleDateString()}: ${day.minutes}min`}
          />
        ))}
      </div>
      
      <div className="text-xs text-center text-gray-500">
        Keep reading daily to maintain your streak!
      </div>
    </div>
  );

  const ReadingLevelCard = () => (
    <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-6 border border-purple-100">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900">Reading Level</h3>
        <div className="text-2xl">⭐</div>
      </div>
      
      <div className="text-center mb-4">
        <div className="text-3xl font-bold text-purple-600 mb-1">Level {stats.readingLevel}</div>
        <div className="text-sm text-gray-600">
          {stats.readingXP} / {stats.nextLevelXP} XP
        </div>
      </div>
      
      <div className="mb-4">
        <div className="w-full bg-white rounded-full h-2">
          <div 
            className="bg-gradient-to-r from-purple-500 to-indigo-500 h-2 rounded-full transition-all duration-300" 
            style={{ width: `${((stats.readingXP / stats.nextLevelXP) * 100)}%` }}
          />
        </div>
      </div>
      
      <div className="text-xs text-center text-gray-500">
        {stats.nextLevelXP - stats.readingXP} XP to next level
      </div>
    </div>
  );

  const MonthlyGoalsChart = () => (
    <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Monthly Reading Goals</h3>
      <div className="space-y-3">
        {analytics.monthlyProgress.map(month => (
          <div key={month.month} className="flex items-center justify-between">
            <span className="text-sm text-gray-600 w-8">{month.month}</span>
            <div className="flex-1 mx-3">
              <div className="relative">
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className={`h-3 rounded-full transition-all duration-300 ${
                      month.books >= month.goal ? 'bg-green-500' : 'bg-blue-500'
                    }`}
                    style={{ width: `${Math.min((month.books / month.goal) * 100, 100)}%` }}
                  />
                </div>
                {month.books > month.goal && (
                  <div className="absolute top-0 right-0 -mt-1 -mr-1">
                    <span className="text-xs">🎉</span>
                  </div>
                )}
              </div>
            </div>
            <span className="text-xs text-gray-500 w-12 text-right">
              {month.books}/{month.goal}
            </span>
          </div>
        ))}
      </div>
    </div>
  );

  const AchievementsCard = () => (
    <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Achievements</h3>
      {loading.achievements ? (
        <div className="text-center py-4">
          <div className="text-2xl">⏳</div>
          <div className="text-sm text-gray-500">Loading achievements...</div>
        </div>
      ) : (
        <div className="grid grid-cols-3 gap-3">
          {achievements.slice(0, 6).map(achievement => (
            <div
              key={achievement.id || achievement.achievement_id}
              className={`p-3 rounded-lg text-center transition-all ${
                achievement.unlocked 
                  ? 'bg-yellow-50 border border-yellow-200' 
                  : 'bg-gray-50 border border-gray-200 opacity-60'
              }`}
            >
              <div className="text-2xl mb-1">{achievement.icon || achievement.achievement_icon}</div>
              <div className="text-xs font-medium text-gray-900">{achievement.name || achievement.achievement_name}</div>
              <div className="text-xs text-gray-600 mt-1">{achievement.description || achievement.achievement_description}</div>
              {achievement.unlocked && (
                <div className="text-xs text-yellow-600 mt-1">✓ Unlocked</div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const BookCard = ({ book }) => (
    <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100 hover:shadow-md transition-all hover:scale-105">
      <div className="flex items-start justify-between mb-3">
        <div className="flex-1">
          <h3 className="font-semibold text-gray-900 text-sm line-clamp-2">{book.title}</h3>
          <p className="text-xs text-gray-600 mt-1">{book.author}</p>
        </div>
        <span className={`px-2 py-1 text-xs rounded-full ${
          book.format === 'PDF' ? 'bg-red-100 text-red-700' : 'bg-purple-100 text-purple-700'
        }`}>
          {book.format}
        </span>
      </div>
      
      <div className="mb-3">
        <div className="flex justify-between items-center mb-1">
          <span className="text-xs text-gray-500">Progress</span>
          <span className="text-xs text-gray-600">{book.progress_percentage || 0}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-1.5">
          <div 
            className="bg-blue-500 h-1.5 rounded-full" 
            style={{ width: `${book.progress_percentage || 0}%` }}
          />
        </div>
      </div>

      <div className="flex items-center justify-between">
        <button 
          onClick={() => handleContinueReading(book)}
          className="text-xs text-gray-500 hover:text-blue-600 transition-colors"
        >
          📖 Continue Reading
        </button>
        {book.file_url && (
          <a
            href={book.file_url}
            target="_blank"
            rel="noopener noreferrer"
            className="text-xs bg-blue-600 text-white px-3 py-1 rounded-full hover:bg-blue-700 transition-colors"
          >
            Open
          </a>
        )}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-gray-900">📚 My Library</h1>
              
              {/* Search and Filter - only show on library tab */}
              {activeTab === 'library' && (
                <div className="flex items-center space-x-4 ml-8">
                  <div className="relative">
                    <input
                      type="text"
                      placeholder="Search books..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-64 pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                    <div className="absolute left-2 top-2.5 text-gray-400">🔍</div>
                  </div>
                  
                  <select
                    value={filterGenre}
                    onChange={(e) => setFilterGenre(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">All Genres</option>
                    <option value="Fiction">Fiction</option>
                    <option value="Non-Fiction">Non-Fiction</option>
                    <option value="Technology">Technology</option>
                    <option value="Science">Science</option>
                    <option value="Business">Business</option>
                    <option value="Self-Help">Self-Help</option>
                    <option value="General">General</option>
                  </select>
                </div>
              )}
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Add Book Button - only show on library tab */}
              {activeTab === 'library' && (
                <button
                  onClick={() => setShowUploadForm(!showUploadForm)}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                >
                  ➕ Add Book
                </button>
              )}
              
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-600">
                  Welcome, {user?.name || 'User'}
                </span>
                <button
                  onClick={logout}
                  className="text-sm text-gray-600 hover:text-gray-900 transition-colors"
                >
                  Logout
                </button>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <div className="max-w-7xl mx-auto px-6 py-4">
        <div className="flex space-x-6 border-b border-gray-200 overflow-x-auto">
          {[
            { id: 'overview', label: '📊 Overview' },
            { id: 'library', label: '📚 Library' },
            { id: 'progress', label: '📈 Progress' },
            { id: 'notes', label: '📝 Notes' },
            { id: 'achievements', label: '🏆 Achievements' },
            { id: 'goals', label: '🎯 Goals' },
            { id: 'social', label: '🌟 Social' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`pb-2 px-1 border-b-2 font-medium text-sm transition-colors whitespace-nowrap ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 pb-8">
        {/* Tab Content */}
        {activeTab === 'overview' && (
          <div className="space-y-8">
            {/* Stats Overview */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <StatCard
                title="Total Books"
                value={stats.totalBooks}
                icon="📚"
                color="bg-gradient-to-br from-blue-50 to-blue-100"
                trend={{ positive: true, value: '+2 this month' }}
              />
              <StatCard
                title="Books Read"
                value={stats.booksRead}
                subtitle={`${stats.totalBooks > 0 ? Math.round((stats.booksRead / stats.totalBooks) * 100) : 0}% completion`}
                icon="✅"
                color="bg-gradient-to-br from-green-50 to-green-100"
              />
              <StatCard
                title="Reading Time"
                value={`${Math.floor(stats.readingTime / 60)}h ${stats.readingTime % 60}m`}
                subtitle="This week"
                icon="⏰"
                color="bg-gradient-to-br from-purple-50 to-purple-100"
                trend={{ positive: true, value: '+1.2h from last week' }}
              />
              <StatCard
                title="Pages Read"
                value={stats.pagesRead}
                subtitle="Total pages"
                icon="📄"
                color="bg-gradient-to-br from-yellow-50 to-yellow-100"
              />
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2 space-y-6">
                <MonthlyGoalsChart />
                <AchievementsCard />
              </div>
              
              <div className="space-y-6">
                <ReadingStreakCard />
                <ReadingLevelCard />
              </div>
            </div>
          </div>
        )}

        {activeTab === 'library' && (
          <div className="space-y-6">
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-lg font-semibold text-gray-900">
                  Your Library ({filteredBooks.length} {filteredBooks.length === 1 ? 'book' : 'books'})
                </h2>
              </div>

              {filteredBooks.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4">
                  {filteredBooks.map(book => (
                    <BookCard key={book.id} book={book} />
                  ))}
                </div>
              ) : searchQuery || filterGenre !== 'all' ? (
                <div className="text-center py-12">
                  <div className="text-4xl mb-4">🔍</div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No books found</h3>
                  <p className="text-gray-600">Try adjusting your search or filters</p>
                </div>
              ) : (
                <div 
                  className={`border-2 border-dashed rounded-xl p-12 text-center transition-colors ${
                    dragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300'
                  }`}
                  onDragEnter={handleDrag}
                  onDragLeave={handleDrag}
                  onDragOver={handleDrag}
                  onDrop={handleDrop}
                >
                  <div className="text-4xl mb-4">📚</div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No books yet</h3>
                  <p className="text-gray-600 mb-4">Start building your digital library by adding your first book</p>
                  <p className="text-sm text-gray-500">Drag and drop PDF or EPUB files here, or click "Add Book"</p>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'progress' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="space-y-6">
              <ReadingStreakCard />
              <ReadingLevelCard />
              
              {/* Weekly Progress */}
              <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Weekly Reading</h3>
                <div className="space-y-3">
                  {analytics.weeklyProgress.map(day => (
                    <div key={day.day} className="flex items-center justify-between">
                      <span className="text-sm text-gray-600 w-8">{day.day}</span>
                      <div className="flex-1 mx-3">
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-blue-500 h-2 rounded-full" 
                            style={{ width: `${Math.min((day.minutes / 120) * 100, 100)}%` }}
                          />
                        </div>
                      </div>
                      <span className="text-xs text-gray-500 w-8 text-right">{day.minutes}m</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            <div className="space-y-6">
              <MonthlyGoalsChart />
              <AchievementsCard />
            </div>
          </div>
        )}

        {/* Gamification Tabs */}
        {activeTab === 'notes' && <BookNotesSystem books={books} />}
        {activeTab === 'achievements' && <AchievementSystem />}
        {activeTab === 'goals' && <GoalSystem />}
        {activeTab === 'social' && <GamificationDashboard />}
      </div>

      {/* Upload Form Modal */}
      {showUploadForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl p-6 max-w-md w-full">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold text-gray-900">Add New Book</h2>
              <button
                onClick={() => setShowUploadForm(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ✕
              </button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Book Title</label>
                <input
                  type="text"
                  name="title"
                  value={form.title}
                  onChange={handleChange}
                  placeholder="Enter book title"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Author</label>
                <input
                  type="text"
                  name="author"
                  value={form.author}
                  onChange={handleChange}
                  placeholder="Enter author name"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Format</label>
                  <select
                    name="format"
                    value={form.format}
                    onChange={handleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="PDF">PDF</option>
                    <option value="ePub">ePub</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Genre</label>
                  <select
                    name="genre"
                    value={form.genre}
                    onChange={handleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="General">General</option>
                    <option value="Fiction">Fiction</option>
                    <option value="Non-Fiction">Non-Fiction</option>
                    <option value="Technology">Technology</option>
                    <option value="Science">Science</option>
                    <option value="Business">Business</option>
                    <option value="Self-Help">Self-Help</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">File</label>
                <input
                  type="file"
                  accept=".pdf,.epub"
                  onChange={(e) => setFile(e.target.files[0])}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                {file && (
                  <p className="text-sm text-gray-600 mt-1">Selected: {file.name}</p>
                )}
              </div>

              <div className="flex space-x-4 pt-4">
                <button
                  type="submit"
                  disabled={bookLoading || !file}
                  className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                  {bookLoading ? 'Uploading...' : 'Upload Book'}
                </button>
                <button
                  type="button"
                  onClick={() => setShowUploadForm(false)}
                  className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;