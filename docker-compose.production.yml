# Production Docker Compose Configuration
# Optimized for production deployment with security and performance enhancements

version: '3.8'

services:
  # Client (React SPA) - Production optimized
  client:
    build:
      context: ./client2
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - BUILD_VERSION=${BUILD_VERSION:-1.0.0}
    image: literati-client:${IMAGE_TAG:-latest}
    container_name: literati-client-prod
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-3000}:80"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_AI_SERVICE_URL=${VITE_AI_SERVICE_URL}
    networks:
      - literati-network
      - monitoring-network
    volumes:
      - client-logs:/var/log/nginx:rw
      - client-cache:/var/cache/nginx:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.client.tls=true"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Server (Express API) - Production optimized
  server:
    build:
      context: ./server2
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - BUILD_VERSION=${BUILD_VERSION:-1.0.0}
    image: literati-server:${IMAGE_TAG:-latest}
    container_name: literati-server-prod
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-5000}:5000"
      - "${SERVER_HTTPS_PORT:-5443}:5443"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - HTTPS_PORT=5443
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - DOMAIN=${DOMAIN}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - TRUSTED_PROXIES=${TRUSTED_PROXIES}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-52428800}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_MONITORING=true
      - ENABLE_HTTPS=true
      - CLUSTER_ENABLED=true
      - COMPRESSION_ENABLED=true
    networks:
      - literati-network
      - monitoring-network
    volumes:
      - server-storage:/app/storage:rw
      - server-logs:/app/logs:rw
      - ssl-certs:/app/ssl:ro
    secrets:
      - jwt_secret
      - supabase_service_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.server.tls=true"
      - "traefik.http.routers.server.tls.certresolver=letsencrypt"
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first

  # AI Service (FastAPI) - Production optimized
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
      target: production
      args:
        - BUILD_VERSION=${BUILD_VERSION:-1.0.0}
    image: literati-ai:${IMAGE_TAG:-latest}
    container_name: literati-ai-prod
    restart: unless-stopped
    ports:
      - "${AI_SERVICE_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=production
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WORKERS=${AI_WORKERS:-2}
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
    networks:
      - literati-network
      - monitoring-network
    volumes:
      - ai-logs:/app/logs:rw
    secrets:
      - google_api_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai.rule=Host(`ai.${DOMAIN}`)"
      - "traefik.http.routers.ai.tls=true"
      - "traefik.http.routers.ai.tls.certresolver=letsencrypt"
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Redis Cache (Optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: literati-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - literati-network
    volumes:
      - redis-data:/data:rw
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Reverse Proxy and Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: literati-proxy-prod
    restart: unless-stopped
    command:
      - --api.dashboard=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --accesslog=true
      - --metrics.prometheus=true
    ports:
      - "80:80"
      - "443:443"
    networks:
      - literati-network
      - monitoring-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/letsencrypt:rw
      - traefik-logs:/var/log/traefik:rw
    environment:
      - TRAEFIK_API_DASHBOARD=false
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: literati-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - monitoring-network
    volumes:
      - prometheus-config:/etc/prometheus:ro
      - prometheus-data:/prometheus:rw
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: literati-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - monitoring-network
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - grafana-config:/etc/grafana:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`monitoring.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# Networks
networks:
  literati-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

# Volumes
volumes:
  # Application data
  server-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${STORAGE_PATH:-./storage}

  # Cache and temporary data
  redis-data:
    driver: local
  client-cache:
    driver: local

  # Logs
  client-logs:
    driver: local
  server-logs:
    driver: local
  ai-logs:
    driver: local
  traefik-logs:
    driver: local

  # SSL certificates
  ssl-certs:
    driver: local
  traefik-certs:
    driver: local

  # Monitoring data
  prometheus-data:
    driver: local
  prometheus-config:
    driver: local
  grafana-data:
    driver: local
  grafana-config:
    driver: local

# Secrets (for Docker Swarm or external secret management)
secrets:
  jwt_secret:
    external: true
  supabase_service_key:
    external: true
  google_api_key:
    external: true