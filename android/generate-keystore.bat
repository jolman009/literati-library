@echo off
setlocal enabledelayedexpansion

REM =============================================================================
REM SHELFQUEST ANDROID KEYSTORE GENERATION SCRIPT (WINDOWS)
REM =============================================================================
REM This batch script generates a keystore for Android app signing and extracts
REM the SHA256 fingerprint for Digital Asset Links verification.
REM
REM Usage: generate-keystore.bat
REM
REM Prerequisites:
REM - Android Studio with JDK
REM
REM The script will:
REM 1. Generate a new keystore for app signing
REM 2. Extract SHA256 fingerprint for Digital Asset Links
REM 3. Generate gradle.properties with the configuration
REM 4. Create assetlinks.json for web verification
REM =============================================================================

echo ========================================
echo   ShelfQuest Android Keystore Generator
echo ========================================
echo.

REM Set JAVA_HOME to Android Studio's JDK
set "JAVA_HOME=C:\Program Files\Android\Android Studio\jbr"
set "PATH=%JAVA_HOME%\bin;%PATH%"

echo Using Java from: %JAVA_HOME%
echo.

REM Configuration
set KEYSTORE_NAME=shelfquest-release.keystore
set KEY_ALIAS=shelfquest_key
set VALIDITY_DAYS=10000
set KEY_SIZE=2048
set ALGORITHM=RSA
set APP_PACKAGE=org.shelfquest.app
set PWA_URL=https://shelfquest.org

REM Check if Java/keytool is available
"%JAVA_HOME%\bin\keytool.exe" -help >nul 2>&1
if errorlevel 1 (
    echo Error: keytool not found at %JAVA_HOME%\bin\keytool.exe
    echo Please ensure Android Studio is installed.
    pause
    exit /b 1
)

REM Check if keystore already exists
if exist "%KEYSTORE_NAME%" (
    echo Warning: Keystore %KEYSTORE_NAME% already exists.
    set /p OVERWRITE="Do you want to overwrite it? (y/N): "
    if /i not "!OVERWRITE!"=="y" (
        echo Keystore generation cancelled.
        pause
        exit /b 0
    )
    del "%KEYSTORE_NAME%"
)

REM Collect keystore information
echo Please provide the following information for your keystore:
echo.

set /p ORG_NAME="Organization Name (e.g., Your Company): "
set /p ORG_UNIT="Organizational Unit (e.g., Development Team): "
set /p CITY="City/Locality: "
set /p STATE="State/Province: "
set /p COUNTRY="Country Code (2 letters, e.g., US): "

echo.
echo Enter keystore password (minimum 6 characters):
powershell -Command "$password = Read-Host -AsSecureString; [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password))" > temp_pass.txt
set /p KEYSTORE_PASSWORD=<temp_pass.txt
del temp_pass.txt

echo Enter key password (can be same as keystore password):
powershell -Command "$password = Read-Host -AsSecureString; [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password))" > temp_pass.txt
set /p KEY_PASSWORD=<temp_pass.txt
del temp_pass.txt

REM Validate password length (basic check)
call :strlen PASSWORD_LENGTH "%KEYSTORE_PASSWORD%"
if %PASSWORD_LENGTH% lss 6 (
    echo Error: Password must be at least 6 characters long.
    pause
    exit /b 1
)

REM Build the distinguished name
set DISTINGUISHED_NAME=CN=Literati, OU=%ORG_UNIT%, O=%ORG_NAME%, L=%CITY%, ST=%STATE%, C=%COUNTRY%

echo.
echo Generating keystore with the following information:
echo Keystore: %KEYSTORE_NAME%
echo Key Alias: %KEY_ALIAS%
echo Distinguished Name: %DISTINGUISHED_NAME%
echo Validity: %VALIDITY_DAYS% days
echo.

REM Generate the keystore
echo Generating keystore...
"%JAVA_HOME%\bin\keytool.exe" -genkeypair -alias "%KEY_ALIAS%" -keyalg "%ALGORITHM%" -keysize %KEY_SIZE% -validity %VALIDITY_DAYS% -keystore "%KEYSTORE_NAME%" -storepass "%KEYSTORE_PASSWORD%" -keypass "%KEY_PASSWORD%" -dname "%DISTINGUISHED_NAME%"

if errorlevel 1 (
    echo Failed to generate keystore.
    pause
    exit /b 1
)

echo Keystore generated successfully!

REM Extract SHA256 fingerprint
echo.
echo Extracting SHA256 fingerprint...
"%JAVA_HOME%\bin\keytool.exe" -list -v -keystore "%KEYSTORE_NAME%" -alias "%KEY_ALIAS%" -storepass "%KEYSTORE_PASSWORD%" > keystore_info.txt

REM Parse SHA256 fingerprint from output
for /f "tokens=2 delims= " %%a in ('findstr "SHA256:" keystore_info.txt') do set SHA256_FINGERPRINT=%%a
del keystore_info.txt

if "%SHA256_FINGERPRINT%"=="" (
    echo Failed to extract SHA256 fingerprint.
    pause
    exit /b 1
)

echo SHA256 Fingerprint: %SHA256_FINGERPRINT%

REM Generate gradle.properties
echo.
echo Generating gradle.properties...

(
echo # Project-wide Gradle settings.
echo # Generated by generate-keystore.bat on %DATE% %TIME%
echo.
echo # IDE ^(e.g. Android Studio^) users:
echo # Gradle settings configured through the IDE *will override*
echo # any settings specified in this file.
echo.
echo # For more details on how to configure your build environment visit
echo # http://www.gradle.org/docs/current/userguide/build_environment.html
echo.
echo # Specifies the JVM arguments used for the daemon process.
echo org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
echo.
echo # When configured, Gradle will run in incubating parallel mode.
echo org.gradle.parallel=true
echo.
echo # AndroidX package structure
echo android.useAndroidX=true
echo.
echo # Kotlin code style
echo kotlin.code.style=official
echo.
echo # Enables namespacing of each library's R class
echo android.nonTransitiveRClass=true
echo.
echo # Build optimizations
echo android.defaults.buildfeatures.buildconfig=false
echo android.defaults.buildfeatures.aidl=false
echo android.defaults.buildfeatures.renderscript=false
echo android.enableR8.fullMode=true
echo.
echo # ==============================================================================
echo # PWA CONFIGURATION
echo # ==============================================================================
echo PWA_URL=%PWA_URL%
echo APP_NAME=Literati
echo APP_PACKAGE_NAME=%APP_PACKAGE%
echo APP_VERSION_NAME=1.0.0
echo APP_VERSION_CODE=1
echo.
echo # TWA Configuration
echo TWA_DISPLAY_MODE=standalone
echo TWA_ORIENTATION=portrait
echo TWA_THEME_COLOR=#6750A4
echo TWA_BACKGROUND_COLOR=#FFFBFE
echo TWA_START_URL=/
echo.
echo # ==============================================================================
echo # KEYSTORE CONFIGURATION ^(GENERATED^)
echo # ==============================================================================
echo KEYSTORE_FILE=%KEYSTORE_NAME%
echo KEYSTORE_PASSWORD=%KEYSTORE_PASSWORD%
echo KEY_ALIAS=%KEY_ALIAS%
echo KEY_PASSWORD=%KEY_PASSWORD%
echo.
echo # SHA256 Fingerprint for Digital Asset Links
echo RELEASE_KEYSTORE_SHA256=%SHA256_FINGERPRINT%
echo.
echo # ==============================================================================
echo # TARGET SDK COMPLIANCE ^(Android 14 - API 34^)
echo # ==============================================================================
echo MIN_SDK_VERSION=24
echo TARGET_SDK_VERSION=34
echo COMPILE_SDK_VERSION=34
echo BUILD_TOOLS_VERSION=34.0.0
echo.
echo # ==============================================================================
echo # BUILD OPTIMIZATION
echo # ==============================================================================
echo org.gradle.caching=true
echo org.gradle.configuration-cache=true
echo org.gradle.vfs.watch=true
echo.
echo # ==============================================================================
echo # SECURITY SETTINGS
echo # ==============================================================================
echo android.enableR8=true
echo android.enableCodeShrinking=true
echo NETWORK_SECURITY_CONFIG=true
) > gradle.properties

echo gradle.properties generated successfully!

REM Generate Digital Asset Links JSON
echo.
echo Generating assetlinks.json for Digital Asset Links verification...

if not exist ".well-known" mkdir ".well-known"

(
echo [{
echo   "relation": ["delegate_permission/common.handle_all_urls"],
echo   "target": {
echo     "namespace": "android_app",
echo     "package_name": "%APP_PACKAGE%",
echo     "sha256_cert_fingerprints": ["%SHA256_FINGERPRINT%"]
echo   }
echo }]
) > .well-known\assetlinks.json

echo assetlinks.json generated successfully!

REM Generate deployment instructions
echo.
echo Generating deployment instructions...

(
echo # Android Deployment Instructions
echo.
echo ## Generated Files
echo.
echo This script has generated the following files:
echo.
echo 1. **%KEYSTORE_NAME%** - Your release keystore ^(keep this secure!^)
echo 2. **gradle.properties** - Gradle configuration with keystore settings
echo 3. **.well-known/assetlinks.json** - Digital Asset Links verification file
echo.
echo ## Next Steps
echo.
echo ### 1. Secure Your Keystore
echo - Move `%KEYSTORE_NAME%` to a secure location
echo - **NEVER** commit the keystore to version control
echo - Consider backing it up to a secure, encrypted location
echo - Update the `KEYSTORE_FILE` path in `gradle.properties` if you move it
echo.
echo ### 2. Upload Digital Asset Links
echo Upload the `.well-known/assetlinks.json` file to your web server at:
echo ```
echo %PWA_URL%/.well-known/assetlinks.json
echo ```
echo.
echo The file should be accessible at this exact URL for Digital Asset Links verification to work.
echo.
echo ### 3. Build Your App
echo ```bash
echo # Debug build
echo gradlew assembleDebug
echo.
echo # Release build ^(signed^)
echo gradlew assembleRelease
echo.
echo # Generate AAB for Play Store
echo gradlew bundleRelease
echo ```
echo.
echo ### 4. Verify Digital Asset Links
echo Use Google's Digital Asset Links tester:
echo https://developers.google.com/digital-asset-links/tools/generator
echo.
echo ### 5. Upload to Play Store
echo 1. Create a new app in Google Play Console
echo 2. Upload the AAB file ^(`app/build/outputs/bundle/release/app-release.aab`^)
echo 3. Complete the store listing with the provided content
echo 4. Submit for review
echo.
echo ## Important Security Notes
echo.
echo - **Keystore Password**: Keep your keystore password secure
echo - **Key Password**: Keep your key password secure
echo - **SHA256 Fingerprint**: %SHA256_FINGERPRINT%
echo - **Digital Asset Links**: Must be accessible at the exact URL above
echo.
echo ## Troubleshooting
echo.
echo If TWA doesn't work:
echo 1. Verify assetlinks.json is accessible at the correct URL
echo 2. Check that the SHA256 fingerprint matches
echo 3. Ensure the package name matches exactly
echo 4. Test with Google's verification tools
echo.
echo Generated on: %DATE% %TIME%
) > DEPLOYMENT_INSTRUCTIONS.md

echo DEPLOYMENT_INSTRUCTIONS.md generated successfully!

REM Summary
echo.
echo ========================================
echo            SUMMARY
echo ========================================
echo.
echo ✓ Keystore created: %KEYSTORE_NAME%
echo ✓ SHA256 Fingerprint: %SHA256_FINGERPRINT%
echo ✓ gradle.properties configured
echo ✓ assetlinks.json generated
echo ✓ Deployment instructions created
echo.
echo IMPORTANT NEXT STEPS:
echo 1. Upload .well-known/assetlinks.json to: %PWA_URL%/.well-known/assetlinks.json
echo 2. Keep your keystore file secure and backed up
echo 3. Never commit gradle.properties with passwords to version control
echo 4. Test the Digital Asset Links verification
echo.
echo You're ready to build your Android app!
echo.

echo Script completed successfully!
pause
goto :eof

REM Function to get string length
:strlen
setlocal enabledelayedexpansion
set "str=%~2"
set "len=0"
for %%a in (4096 2048 1024 512 256 128 64 32 16 8 4 2 1) do (
  if "!str:~%%a,1!" neq "" (
    set /a "len+=%%a"
    set "str=!str:~%%a!"
  )
)
endlocal & set "%~1=%len%"
goto :eof
