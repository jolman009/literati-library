#!/bin/bash

# =============================================================================
# LITERATI ANDROID KEYSTORE GENERATION SCRIPT
# =============================================================================
# This script generates a keystore for Android app signing and extracts
# the SHA256 fingerprint for Digital Asset Links verification.
#
# Usage: ./generate-keystore.sh
#
# Prerequisites:
# - Java Development Kit (JDK) 11 or higher
# - keytool (part of JDK)
# - openssl (for additional certificate operations)
#
# The script will:
# 1. Generate a new keystore for app signing
# 2. Extract SHA256 fingerprint for Digital Asset Links
# 3. Generate gradle.properties with the configuration
# 4. Create assetlinks.json for web verification
# =============================================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
KEYSTORE_NAME="shelfquest-release.keystore"
KEY_ALIAS="shelfquest_key"
VALIDITY_DAYS=10000  # ~27 years
KEY_SIZE=2048
ALGORITHM="RSA"

# App information
APP_PACKAGE="org.shelfquest.app"
PWA_URL="https://client2-o2l1nijre-joel-guzmans-projects-f8aa100e.vercel.app"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  Literati Android Keystore Generator  ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Check if Java/keytool is available
if ! command -v keytool &> /dev/null; then
    echo -e "${RED}Error: keytool not found. Please install Java Development Kit (JDK).${NC}"
    exit 1
fi

# Check if keystore already exists
if [ -f "$KEYSTORE_NAME" ]; then
    echo -e "${YELLOW}Warning: Keystore $KEYSTORE_NAME already exists.${NC}"
    read -p "Do you want to overwrite it? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Keystore generation cancelled.${NC}"
        exit 0
    fi
    rm -f "$KEYSTORE_NAME"
fi

# Collect keystore information
echo -e "${BLUE}Please provide the following information for your keystore:${NC}"
echo ""

read -p "Organization Name (e.g., Your Company): " ORG_NAME
read -p "Organizational Unit (e.g., Development Team): " ORG_UNIT
read -p "City/Locality: " CITY
read -p "State/Province: " STATE
read -p "Country Code (2 letters, e.g., US): " COUNTRY

echo ""
read -s -p "Enter keystore password (minimum 6 characters): " KEYSTORE_PASSWORD
echo ""
read -s -p "Confirm keystore password: " KEYSTORE_PASSWORD_CONFIRM
echo ""

# Validate password
if [ "$KEYSTORE_PASSWORD" != "$KEYSTORE_PASSWORD_CONFIRM" ]; then
    echo -e "${RED}Error: Passwords do not match.${NC}"
    exit 1
fi

if [ ${#KEYSTORE_PASSWORD} -lt 6 ]; then
    echo -e "${RED}Error: Password must be at least 6 characters long.${NC}"
    exit 1
fi

echo ""
read -s -p "Enter key password (can be same as keystore password): " KEY_PASSWORD
echo ""

# Build the distinguished name
DISTINGUISHED_NAME="CN=Literati, OU=$ORG_UNIT, O=$ORG_NAME, L=$CITY, ST=$STATE, C=$COUNTRY"

echo ""
echo -e "${BLUE}Generating keystore with the following information:${NC}"
echo "Keystore: $KEYSTORE_NAME"
echo "Key Alias: $KEY_ALIAS"
echo "Distinguished Name: $DISTINGUISHED_NAME"
echo "Validity: $VALIDITY_DAYS days"
echo ""

# Generate the keystore
echo -e "${YELLOW}Generating keystore...${NC}"
keytool -genkeypair \
    -alias "$KEY_ALIAS" \
    -keyalg "$ALGORITHM" \
    -keysize $KEY_SIZE \
    -validity $VALIDITY_DAYS \
    -keystore "$KEYSTORE_NAME" \
    -storepass "$KEYSTORE_PASSWORD" \
    -keypass "$KEY_PASSWORD" \
    -dname "$DISTINGUISHED_NAME"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✓ Keystore generated successfully!${NC}"
else
    echo -e "${RED}✗ Failed to generate keystore.${NC}"
    exit 1
fi

# Extract SHA256 fingerprint
echo ""
echo -e "${YELLOW}Extracting SHA256 fingerprint...${NC}"
SHA256_FINGERPRINT=$(keytool -list -v -keystore "$KEYSTORE_NAME" -alias "$KEY_ALIAS" -storepass "$KEYSTORE_PASSWORD" | grep "SHA256:" | cut -d' ' -f3)

if [ -z "$SHA256_FINGERPRINT" ]; then
    echo -e "${RED}✗ Failed to extract SHA256 fingerprint.${NC}"
    exit 1
fi

echo -e "${GREEN}✓ SHA256 Fingerprint: $SHA256_FINGERPRINT${NC}"

# Generate gradle.properties
echo ""
echo -e "${YELLOW}Generating gradle.properties...${NC}"

cat > gradle.properties << EOF
# Project-wide Gradle settings.
# Generated by generate-keystore.sh on $(date)

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
org.gradle.parallel=true

# AndroidX package structure
android.useAndroidX=true

# Kotlin code style
kotlin.code.style=official

# Enables namespacing of each library's R class
android.nonTransitiveRClass=true

# Build optimizations
android.defaults.buildfeatures.buildconfig=false
android.defaults.buildfeatures.aidl=false
android.defaults.buildfeatures.renderscript=false
android.enableR8.fullMode=true

# ==============================================================================
# PWA CONFIGURATION
# ==============================================================================
PWA_URL=$PWA_URL
APP_NAME=Literati
APP_PACKAGE_NAME=$APP_PACKAGE
APP_VERSION_NAME=1.0.0
APP_VERSION_CODE=1

# TWA Configuration
TWA_DISPLAY_MODE=standalone
TWA_ORIENTATION=portrait
TWA_THEME_COLOR=#6750A4
TWA_BACKGROUND_COLOR=#FFFBFE
TWA_START_URL=/

# ==============================================================================
# KEYSTORE CONFIGURATION (GENERATED)
# ==============================================================================
KEYSTORE_FILE=$KEYSTORE_NAME
KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD
KEY_ALIAS=$KEY_ALIAS
KEY_PASSWORD=$KEY_PASSWORD

# SHA256 Fingerprint for Digital Asset Links
RELEASE_KEYSTORE_SHA256=$SHA256_FINGERPRINT

# ==============================================================================
# TARGET SDK COMPLIANCE (Android 14 - API 34)
# ==============================================================================
MIN_SDK_VERSION=24
TARGET_SDK_VERSION=34
COMPILE_SDK_VERSION=34
BUILD_TOOLS_VERSION=34.0.0

# ==============================================================================
# BUILD OPTIMIZATION
# ==============================================================================
org.gradle.caching=true
org.gradle.configuration-cache=true
org.gradle.vfs.watch=true

# ==============================================================================
# SECURITY SETTINGS
# ==============================================================================
android.enableR8=true
android.enableCodeShrinking=true
NETWORK_SECURITY_CONFIG=true
EOF

echo -e "${GREEN}✓ gradle.properties generated successfully!${NC}"

# Generate Digital Asset Links JSON
echo ""
echo -e "${YELLOW}Generating assetlinks.json for Digital Asset Links verification...${NC}"

mkdir -p .well-known

cat > .well-known/assetlinks.json << EOF
[{
  "relation": ["delegate_permission/common.handle_all_urls"],
  "target": {
    "namespace": "android_app",
    "package_name": "$APP_PACKAGE",
    "sha256_cert_fingerprints": ["$SHA256_FINGERPRINT"]
  }
}]
EOF

echo -e "${GREEN}✓ assetlinks.json generated successfully!${NC}"

# Generate deployment instructions
echo ""
echo -e "${YELLOW}Generating deployment instructions...${NC}"

cat > DEPLOYMENT_INSTRUCTIONS.md << EOF
# Android Deployment Instructions

## Generated Files

This script has generated the following files:

1. **$KEYSTORE_NAME** - Your release keystore (keep this secure!)
2. **gradle.properties** - Gradle configuration with keystore settings
3. **.well-known/assetlinks.json** - Digital Asset Links verification file

## Next Steps

### 1. Secure Your Keystore
- Move \`$KEYSTORE_NAME\` to a secure location
- **NEVER** commit the keystore to version control
- Consider backing it up to a secure, encrypted location
- Update the \`KEYSTORE_FILE\` path in \`gradle.properties\` if you move it

### 2. Upload Digital Asset Links
Upload the \`.well-known/assetlinks.json\` file to your web server at:
\`\`\`
$PWA_URL/.well-known/assetlinks.json
\`\`\`

The file should be accessible at this exact URL for Digital Asset Links verification to work.

### 3. Build Your App
\`\`\`bash
# Debug build
./gradlew assembleDebug

# Release build (signed)
./gradlew assembleRelease

# Generate AAB for Play Store
./gradlew bundleRelease
\`\`\`

### 4. Verify Digital Asset Links
Use Google's Digital Asset Links tester:
https://developers.google.com/digital-asset-links/tools/generator

### 5. Upload to Play Store
1. Create a new app in Google Play Console
2. Upload the AAB file (\`app/build/outputs/bundle/release/app-release.aab\`)
3. Complete the store listing with the provided content
4. Submit for review

## Important Security Notes

- **Keystore Password**: Keep your keystore password secure
- **Key Password**: Keep your key password secure
- **SHA256 Fingerprint**: $SHA256_FINGERPRINT
- **Digital Asset Links**: Must be accessible at the exact URL above

## Troubleshooting

If TWA doesn't work:
1. Verify assetlinks.json is accessible at the correct URL
2. Check that the SHA256 fingerprint matches
3. Ensure the package name matches exactly
4. Test with Google's verification tools

Generated on: $(date)
EOF

echo -e "${GREEN}✓ DEPLOYMENT_INSTRUCTIONS.md generated successfully!${NC}"

# Summary
echo ""
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}           SUMMARY                      ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo -e "${GREEN}✓ Keystore created: $KEYSTORE_NAME${NC}"
echo -e "${GREEN}✓ SHA256 Fingerprint: $SHA256_FINGERPRINT${NC}"
echo -e "${GREEN}✓ gradle.properties configured${NC}"
echo -e "${GREEN}✓ assetlinks.json generated${NC}"
echo -e "${GREEN}✓ Deployment instructions created${NC}"
echo ""
echo -e "${YELLOW}IMPORTANT NEXT STEPS:${NC}"
echo "1. Upload .well-known/assetlinks.json to: $PWA_URL/.well-known/assetlinks.json"
echo "2. Keep your keystore file secure and backed up"
echo "3. Never commit gradle.properties with passwords to version control"
echo "4. Test the Digital Asset Links verification"
echo ""
echo -e "${BLUE}You're ready to build your Android app!${NC}"
echo ""

# Optional: Set secure permissions on keystore
chmod 600 "$KEYSTORE_NAME"
echo -e "${YELLOW}Set secure permissions on keystore file.${NC}"

echo -e "${GREEN}Script completed successfully!${NC}"
