# Continuous Integration Pipeline
# Handles testing, linting, and quality checks for all components

name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8.x'

jobs:
  # Client CI
  client-ci:
    name: Client Tests & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client2

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: client2/pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint Code
        run: pnpm run lint || echo "Lint script not configured"

      - name: Type Check
        run: pnpm run type-check || echo "Type check script not configured"

      - name: Run Tests
        run: pnpm test --passWithNoTests --coverage
        env:
          CI: true

      - name: Build Application
        run: pnpm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_AI_SERVICE_URL: ${{ secrets.VITE_AI_SERVICE_URL }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client2/dist/
          retention-days: 30

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          directory: client2/coverage
          flags: client
          name: client-coverage

  # Server CI
  server-ci:
    name: Server Tests & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server2

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: literati_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: server2/pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint Code
        run: pnpm run lint || echo "Lint script not configured"

      - name: Run Tests
        run: pnpm test --passWithNoTests --coverage
        env:
          CI: true
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          JWT_SECRET: test_jwt_secret_32_characters_long

      - name: Security Audit
        run: pnpm audit --audit-level moderate

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          directory: server2/coverage
          flags: server
          name: server-coverage

  # AI Service CI
  ai-service-ci:
    name: AI Service Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-service

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Lint Code
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Run Tests
        run: |
          pytest test_main.py -v --cov=main --cov-report=xml
        env:
          GOOGLE_API_KEY: test_key

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          directory: ai-service
          flags: ai-service
          name: ai-service-coverage

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [client-ci, server-ci, ai-service-ci]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Client Image
        uses: docker/build-push-action@v5
        with:
          context: ./client2
          file: ./client2/Dockerfile
          push: false
          tags: literati-client:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Server Image
        uses: docker/build-push-action@v5
        with:
          context: ./server2
          file: ./server2/Dockerfile
          push: false
          tags: literati-server:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build AI Service Image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-service
          file: ./ai-service/Dockerfile
          push: false
          tags: literati-ai:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [client-ci, server-ci, ai-service-ci]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'literati'
          path: '.'
          format: 'ALL'

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [client-ci, server-ci, ai-service-ci, docker-build, security-scan]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          echo "Client CI: ${{ needs.client-ci.result }}"
          echo "Server CI: ${{ needs.server-ci.result }}"
          echo "AI Service CI: ${{ needs.ai-service-ci.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          if [[ "${{ needs.client-ci.result }}" != "success" ]] || \
             [[ "${{ needs.server-ci.result }}" != "success" ]] || \
             [[ "${{ needs.ai-service-ci.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ Quality gates failed - blocking deployment"
            exit 1
          fi

          echo "✅ All quality gates passed"

      - name: Comment PR Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.client-ci.result }}' === 'success' &&
                          '${{ needs.server-ci.result }}' === 'success' &&
                          '${{ needs.ai-service-ci.result }}' === 'success' &&
                          '${{ needs.docker-build.result }}' === 'success' ? '✅' : '❌';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${status} **CI Pipeline Status**\n\n` +
                    `- Client Build: ${{ needs.client-ci.result }}\n` +
                    `- Server Build: ${{ needs.server-ci.result }}\n` +
                    `- AI Service Build: ${{ needs.ai-service-ci.result }}\n` +
                    `- Docker Build: ${{ needs.docker-build.result }}\n` +
                    `- Security Scan: ${{ needs.security-scan.result }}`
            });