name: Literati CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git config --global init.defaultBranch main

      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'client2/pnpm-lock.yaml'

      - name: 📦 Install client dependencies
        working-directory: ./client2
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run client tests
        working-directory: ./client2
        run: pnpm run test:unit --run || echo "Some tests failed but continuing pipeline"
        continue-on-error: true

      - name: 🔍 Lint client code
        working-directory: ./client2
        run: pnpm run lint || echo "Linting failed but continuing pipeline"
        continue-on-error: true

  build-client:
    name: 🏗️ Build Client
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'client2/pnpm-lock.yaml'

      - name: 📦 Install dependencies
        working-directory: ./client2
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build client
        working-directory: ./client2
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:5000' }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_AI_SERVICE_URL: ${{ secrets.VITE_AI_SERVICE_URL || 'http://localhost:8000' }}
        run: pnpm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client2/dist
          retention-days: 7

  build-docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client2
          file: ./client2/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/literati-client:latest
            ${{ secrets.DOCKER_USERNAME }}/literati-client:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server2
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/literati-server:latest
            ${{ secrets.DOCKER_USERNAME }}/literati-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push AI service image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-service
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/literati-ai:latest
            ${{ secrets.DOCKER_USERNAME }}/literati-ai:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-client, build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🚧 Staging deployment would happen here"
          echo "This could deploy to your staging environment"

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-client, build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to production
        run: |
          echo "🚀 Production deployment would happen here"
          echo "This could deploy to Vercel, Render, or your chosen platform"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run security audit
        working-directory: ./client2
        run: |
          pnpm audit --prod
          echo "🔒 Security audit completed"

  lighthouse:
    name: 🏃 Performance Tests
    runs-on: ubuntu-latest
    needs: build-client
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client2/dist

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: 🏃 Run Lighthouse CI
        working-directory: ./client2
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          lhci autorun --collect.staticDistDir=./dist || echo "Lighthouse CI completed with warnings"