name: Docker Integration Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ develop ]

jobs:
  docker-test:
    name: üê≥ Docker Stack Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìù Create test environment file
        run: |
          cat > .env << EOF
          # Test environment variables
          VITE_API_BASE_URL=http://localhost:5000
          VITE_SUPABASE_URL=https://test.supabase.co
          VITE_SUPABASE_ANON_KEY=test-anon-key
          VITE_AI_SERVICE_URL=http://localhost:8000
          
          SUPABASE_URL=https://test.supabase.co
          SUPABASE_SERVICE_KEY=test-service-key
          JWT_SECRET=test-jwt-secret-for-github-actions-only
          
          GOOGLE_API_KEY=test-google-api-key
          NODE_ENV=test
          EOF

      - name: üèóÔ∏è Build Docker images
        run: |
          docker-compose -f docker-compose.yml build --parallel
          
      - name: üöÄ Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          
      - name: ‚è≥ Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
      - name: üß™ Test service health
        run: |
          # Test AI service health
          curl -f http://localhost:8000/health || exit 1
          echo "‚úÖ AI service is healthy"
          
          # Test client accessibility (may need build time)
          timeout 60 bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do echo "Waiting for client..."; sleep 5; done' || echo "‚ö†Ô∏è Client health check timeout (expected during build)"
          
          # Test server health (if it has health endpoint)
          curl -f http://localhost:5000/health || echo "‚ö†Ô∏è Server health endpoint not available"
          
      - name: üìä Show service status
        run: |
          docker-compose -f docker-compose.yml ps
          
      - name: üìù Show service logs
        if: failure()
        run: |
          echo "=== AI Service Logs ==="
          docker-compose -f docker-compose.yml logs ai-service
          echo "=== Server Logs ==="
          docker-compose -f docker-compose.yml logs server
          echo "=== Client Logs ==="
          docker-compose -f docker-compose.yml logs client
          
      - name: üõë Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.yml down -v