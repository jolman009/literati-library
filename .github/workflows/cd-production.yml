# Production Deployment Pipeline
# Deploys to production with manual approval and comprehensive safety checks

name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip integration tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/literati

jobs:
  # Pre-deployment Validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Version Tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi

          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0"
            exit 1
          fi

          echo "✅ Version format valid: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check Staging Health
        run: |
          echo "🔍 Checking staging environment health..."

          # Check if staging is healthy before production deployment
          if ! curl -f https://${{ secrets.STAGING_DOMAIN }}/health; then
            echo "❌ Staging environment is unhealthy"
            exit 1
          fi

          echo "✅ Staging environment is healthy"

      - name: Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Build Production Images
  build-production:
    name: Build Production Images
    runs-on: ubuntu-latest
    needs: pre-deployment
    outputs:
      image-tag: ${{ steps.tag.outputs.tag }}
      version: ${{ steps.tag.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Version and Tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi

          TAG="production-${VERSION}-$(date +%Y%m%d)-${GITHUB_SHA::8}"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Client Image
        uses: docker/build-push-action@v5
        with:
          context: ./client2
          file: ./client2/Dockerfile
          target: production
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-client:${{ steps.tag.outputs.tag }}
            ${{ env.IMAGE_PREFIX }}-client:${{ steps.tag.outputs.version }}
            ${{ env.IMAGE_PREFIX }}-client:production-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ steps.tag.outputs.version }}

      - name: Build and Push Server Image
        uses: docker/build-push-action@v5
        with:
          context: ./server2
          file: ./server2/Dockerfile
          target: production
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-server:${{ steps.tag.outputs.tag }}
            ${{ env.IMAGE_PREFIX }}-server:${{ steps.tag.outputs.version }}
            ${{ env.IMAGE_PREFIX }}-server:production-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ steps.tag.outputs.version }}

      - name: Build and Push AI Service Image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-service
          file: ./ai-service/Dockerfile
          target: production
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-ai:${{ steps.tag.outputs.tag }}
            ${{ env.IMAGE_PREFIX }}-ai:${{ steps.tag.outputs.version }}
            ${{ env.IMAGE_PREFIX }}-ai:production-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.tag.outputs.version }}

      - name: Image Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-server:${{ steps.tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Manual Approval Gate
  approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-production]
    environment: production-approval

    steps:
      - name: Request Deployment Approval
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.build-production.outputs.version }}';
            const tag = '${{ needs.build-production.outputs.image-tag }}';

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `🚀 **Production Deployment Requested**\n\n` +
                    `**Version:** \`${version}\`\n` +
                    `**Build Tag:** \`${tag}\`\n` +
                    `**Commit:** ${context.sha}\n\n` +
                    `Waiting for manual approval to proceed with production deployment.`
            });

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production, approval]
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Add Production Servers to Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST_1 }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST_2 }} >> ~/.ssh/known_hosts

      - name: Create Production Environment File
        run: |
          cat > .env.production << EOF
          NODE_ENV=production
          BUILD_VERSION=${{ needs.build-production.outputs.version }}
          IMAGE_TAG=${{ needs.build-production.outputs.image-tag }}

          # Server Configuration
          PORT=5000
          HTTPS_PORT=5443
          ENABLE_HTTPS=true
          DOMAIN=${{ secrets.PRODUCTION_DOMAIN }}
          FRONTEND_URL=https://${{ secrets.PRODUCTION_DOMAIN }}
          CORS_ORIGIN=https://${{ secrets.PRODUCTION_DOMAIN }}

          # Database
          SUPABASE_URL=${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_SERVICE_KEY=${{ secrets.PRODUCTION_SUPABASE_SERVICE_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.PRODUCTION_SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY=${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}

          # JWT
          JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.PRODUCTION_JWT_REFRESH_SECRET }}

          # AI Service
          GOOGLE_API_KEY=${{ secrets.PRODUCTION_GOOGLE_API_KEY }}
          AI_SERVICE_URL=https://ai.${{ secrets.PRODUCTION_DOMAIN }}

          # Client Environment
          VITE_API_BASE_URL=https://api.${{ secrets.PRODUCTION_DOMAIN }}
          VITE_SUPABASE_URL=${{ secrets.PRODUCTION_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
          VITE_AI_SERVICE_URL=https://ai.${{ secrets.PRODUCTION_DOMAIN }}

          # Security
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          ENABLE_MONITORING=true
          LOG_LEVEL=info

          # Performance
          CLUSTER_ENABLED=true
          COMPRESSION_ENABLED=true

          # Docker Registry
          REGISTRY=${{ env.REGISTRY }}
          IMAGE_PREFIX=${{ env.IMAGE_PREFIX }}
          EOF

      - name: Create Backup
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST_1 }} << 'EOF'
            cd /opt/literati
            ./scripts/deploy.sh --skip-tests --environment production --create-backup-only
          EOF

      - name: Deploy to Production (Primary)
        run: |
          scp -r .env.production docker-compose.yml docker-compose.production.yml scripts/ \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST_1 }}:/opt/literati/

          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST_1 }} << 'EOF'
            cd /opt/literati

            # Set environment
            export ENV_FILE=".env.production"
            export IMAGE_TAG="${{ needs.build-production.outputs.image-tag }}"

            # Log in to container registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Run production deployment script
            ./scripts/deploy.sh --skip-tests --environment production

            echo "✅ Primary server deployment successful"
          EOF

      - name: Health Check Primary
        run: |
          sleep 60
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health
          curl -f https://api.${{ secrets.PRODUCTION_DOMAIN }}/api/monitoring/health
          curl -f https://ai.${{ secrets.PRODUCTION_DOMAIN }}/health

      - name: Deploy to Production (Secondary)
        if: success()
        run: |
          scp -r .env.production docker-compose.yml docker-compose.production.yml scripts/ \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST_2 }}:/opt/literati/

          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST_2 }} << 'EOF'
            cd /opt/literati

            # Set environment
            export ENV_FILE=".env.production"
            export IMAGE_TAG="${{ needs.build-production.outputs.image-tag }}"

            # Log in to container registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Run production deployment script
            ./scripts/deploy.sh --skip-tests --environment production

            echo "✅ Secondary server deployment successful"
          EOF

      - name: Final Health Check
        run: |
          sleep 60
          for i in {1..5}; do
            if curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health && \
               curl -f https://api.${{ secrets.PRODUCTION_DOMAIN }}/api/monitoring/health && \
               curl -f https://ai.${{ secrets.PRODUCTION_DOMAIN }}/health; then
              echo "✅ Health check passed (attempt $i)"
              break
            else
              echo "⚠️ Health check failed (attempt $i)"
              if [ $i -eq 5 ]; then
                echo "❌ Final health check failed"
                exit 1
              fi
              sleep 30
            fi
          done

  # Post-deployment Tests
  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success() && !inputs.skip_tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8.x'

      - name: Install Test Dependencies
        run: |
          pnpm add -D @playwright/test
          npx playwright install

      - name: Run Production Smoke Tests
        run: |
          # Basic functionality tests against production
          npx playwright test --config=playwright.production.config.js
        env:
          PRODUCTION_URL: https://${{ secrets.PRODUCTION_DOMAIN }}
          API_URL: https://api.${{ secrets.PRODUCTION_DOMAIN }}

      - name: Performance Validation
        run: |
          npm install -g artillery
          cat > production-load-test.yml << EOF
          config:
            target: 'https://api.${{ secrets.PRODUCTION_DOMAIN }}'
            phases:
              - duration: 60
                arrivalRate: 2
                name: "Production validation"
          scenarios:
            - name: "Health check"
              requests:
                - get:
                    url: "/api/monitoring/health"
                    expect:
                      - statusCode: 200
          EOF

          artillery run production-load-test.yml

  # Deployment Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: always()

    steps:
      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-production.outputs.version }}
          release_name: Release ${{ needs.build-production.outputs.version }}
          body: |
            🚀 **Production Deployment Successful**

            **Version:** ${{ needs.build-production.outputs.version }}
            **Build Tag:** ${{ needs.build-production.outputs.image-tag }}
            **Deployed:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

            ### 🔗 Links
            - [Application](https://${{ secrets.PRODUCTION_DOMAIN }})
            - [API Documentation](https://api.${{ secrets.PRODUCTION_DOMAIN }}/docs)
            - [Monitoring Dashboard](https://${{ secrets.PRODUCTION_DOMAIN }}/api/monitoring/dashboard)

            ### ✅ Deployment Status
            - Primary Server: ✅ Deployed
            - Secondary Server: ✅ Deployed
            - Health Checks: ✅ Passed
            - Post-deployment Tests: ✅ Passed

          draft: false
          prerelease: false

      - name: Notify Team
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const version = '${{ needs.build-production.outputs.version }}';
            const domain = '${{ secrets.PRODUCTION_DOMAIN }}';

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `${status} **Production Deployment Complete**\n\n` +
                    `**Version:** \`${version}\`\n` +
                    `**Status:** ${{ job.status }}\n` +
                    `**Deployed:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")\n\n` +
                    `🔗 [Live Application](https://${domain})\n` +
                    `📊 [Monitoring](https://${domain}/api/monitoring/dashboard)\n` +
                    `📖 [API Docs](https://api.${domain}/docs)`
            });